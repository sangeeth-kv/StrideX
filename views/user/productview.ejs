<%- include("partials/header") %>
<head>
    <!-- Toastify CSS & JS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<main class="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
    <!-- Breadcrumb with enhanced styling -->
    <div class="border-b border-gray-200 bg-white shadow-sm">
        <div class="container mx-auto px-4 py-3">
            <nav class="flex items-center space-x-2 text-sm">
                <a href="/user/home" class="text-gray-600 hover:text-indigo-600 transition-colors font-medium">Home</a>
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
                <a href="#" class="text-gray-600 hover:text-indigo-600 transition-colors font-medium"><%= product.categoryId.name %></a>
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
                <span class="text-indigo-600 font-medium"><%= product.name %></span>
            </nav>
        </div>
    </div>

    <!-- Product Section with enhanced styling -->
    <section class="container mx-auto px-4 py-12">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-0">
                <!-- Product Image Gallery with enhanced styling -->
                <div class="bg-gradient-to-br from-gray-50 to-gray-100 p-8">
                    <div class="relative rounded-xl overflow-hidden bg-white shadow-md">
                        <div id="image-magnifier-container" class="relative overflow-hidden h-[500px]">
                            <img id="mainImage" src="<%= product.images[0] %>" alt="<%= product.name %>" 
                                 class="w-full h-full object-cover transition-all duration-500 hover:scale-105">
                            <div id="zoom-lens" class="hidden absolute border-2 border-indigo-300 shadow-lg"></div>
                            <div id="zoom-result" class="hidden absolute top-0 left-0 w-full h-full bg-no-repeat pointer-events-none z-10"></div>
                        </div>
                        <div class="absolute top-4 right-4 bg-white/90 backdrop-blur-sm p-2 rounded-full shadow-md">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
                            </svg>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-4 gap-4 mt-6">
                        <% product.images.forEach(image => { %>
                            <button onclick="changeMainImage(this.querySelector('img').src)" 
                                    class="relative rounded-lg overflow-hidden bg-white aspect-square group shadow-md hover:shadow-lg transition-all duration-300">
                                <img src="<%= image %>" class="w-full h-full object-cover transition duration-300 group-hover:scale-110">
                                <div class="absolute inset-0 border-2 border-transparent group-hover:border-indigo-500 rounded-lg transition-all duration-300"></div>
                            </button>
                        <% }) %>
                    </div>
                </div>

                <!-- Product Info with enhanced styling -->
                <div class="p-8 lg:p-10 space-y-8">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900 mb-2 leading-tight"><%= product.name %></h1>
                        
                        <!-- Enhanced Brand Section -->
                        <div class="flex items-center space-x-4 mb-4">
                            <input type="hidden" id="productId" value="<%=product._id %>">
                            <span class="text-sm text-gray-600 font-medium">Brand:</span>
                            <div class="flex items-center bg-gray-50 px-3 py-1 rounded-full">
                                <% if (product.brand.logo) { %>
                                    <img src="<%= product.brand.logo %>" alt="<%= product.brand.name %>" class="h-6 w-auto mr-2">
                                <% } %>
                                <a href="#" class="text-sm font-medium text-indigo-600 hover:text-indigo-500 transition-colors">
                                    <%= product.brand.name %>
                                </a>
                            </div>
                        </div>
                        
                        <!-- Category Info -->
                        <div class="flex items-center space-x-4">
                            <span class="text-sm text-gray-600 font-medium">Category:</span>
                            <a href="#" class="text-sm font-medium bg-gray-50 px-3 py-1 rounded-full text-indigo-600 hover:text-indigo-500 transition-colors">
                                <%= product.categoryId.name %>
                            </a>
                        </div>
                    </div>

                    <!-- Price with enhanced styling -->
                    <div class="flex items-baseline space-x-4 bg-gray-50 p-4 rounded-xl">
                        <!-- Show sale price if available, otherwise show regular price -->
                        <span id="currentPrice" class="text-4xl font-bold text-indigo-600">
                            ₹<%= product.variants[0].regularPrice - (product.variants[0].regularPrice*maxOffer/100 )%>
                        </span>
                        
                        <!-- Show regular price as strikethrough when a sale price exists -->
                        <% if (product.variants[0].salePrice && product.variants[0].salePrice < product.variants[0].regularPrice) { %>
                            <span id="oldPrice" class="text-xl text-gray-400 line-through">
                                ₹<%= product.variants[0].regularPrice %>
                            </span>
                            
                            <!-- Show discount percentage -->
                            <span class="px-3 py-1 bg-red-100 text-red-700 text-sm font-medium rounded-full">
                                <%= maxOffer %>% OFF
                            </span>
                        <% } else if (product.offer > 0) { %>
                            <!-- If there's a product-level offer but no variant-specific sale price -->
                            <span id="oldPrice" class="text-xl text-gray-400 line-through">
                                ₹<%= product.variants[0].regularPrice %>
                            </span>
                            
                            <span class="px-3 py-1 bg-red-100 text-red-700 text-sm font-medium rounded-full">
                                <%= product.offer %>% OFF
                            </span>
                        <% } %>
                    </div>

                    <!-- Size Selection with enhanced styling -->
                    <div class="space-y-4">
                        <label class="block text-sm font-medium text-gray-700">Select Size</label>
                        <p id="addtocartError" class="text-red-500 text-sm mt-1 hidden"></p>
                        <div id="productVariants" data-variants='<%= JSON.stringify(product.variants) %>'
                             class="grid grid-cols-4 sm:grid-cols-6 gap-3">
                            <% product.variants.forEach(variant => { %>
                                <button class="size-box relative bg-white border-2 border-gray-200 rounded-lg py-3 hover:border-indigo-500 hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all duration-200"
                                        onclick="selectSize(this, '<%= variant.size %>', '<%= variant.regularPrice %>')"
                                        data-size="<%= variant.size %>"
                                        data-variantRegularPrice="<%=variant.regularPrice %>"
                                        data-price="<%= variant.regularPrice - (variant.regularPrice*maxOffer/100) %>">
                                    <span class="text-sm font-medium text-gray-900"><%= variant.size %></span>
                                </button>
                            <% }) %>    
                        </div>
                        <input type="hidden" id="selectedSize" name="size">
                    </div>

                    <!-- Quantity & Actions with enhanced styling -->
                    <div class="space-y-4">
                        <label class="block text-sm font-medium text-gray-700">Quantity</label>
                        <div class="flex items-center space-x-4">
                            <div class="flex items-center border-2 border-gray-200 rounded-lg overflow-hidden">
                                <button onclick="decreaseQty()" 
                                        class="w-10 h-10 flex items-center justify-center text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 transition-colors">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                                    </svg>
                                </button>
                                <span id="quantity" class="w-12 text-center font-medium">1</span>
                                <button onclick="increaseQty()"
                                        class="w-10 h-10 flex items-center justify-center text-gray-600 hover:text-indigo-600 hover:bg-indigo-50 transition-colors">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                </button>
                            </div>

                            <button id="addToCart" class="flex-1 bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition-all duration-200 flex items-center justify-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                                </svg>
                                Add to Cart
                            </button>
                            <div class="relative">
                                <button class="wishlist-btn p-3 border-2 border-gray-200 rounded-lg text-gray-600 hover:text-red-500 hover:border-red-500 transition-all duration-200 bg-white" 
                                    data-product-id="<%= product._id %>">
                                    <% if (wishlist && wishlist.includes(product._id.toString())) { %>
                                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-red-500" fill="currentColor" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 21l-1.45-1.32C5.4 15.36 2 12.28 2 8.5A5.5 5.5 0 0112 3a5.5 5.5 0 0110 5.5c0 3.78-3.4 6.86-8.55 11.18L12 21z" />
                                        </svg>
                                    <% } else { %>
                                        <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-gray-400 hover:text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                        </svg>
                                    <% } %>
                                </button>
                            </div>
                        </div>
                    </div>
                   
                    <!-- Stock Status with enhanced styling -->
                    <div class="flex items-center space-x-2 text-sm bg-gray-50 p-3 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span class="text-gray-600 font-medium">Availability:</span>
                        <span id="availabilityStatus" 
                              class="font-medium <%= product.stock > 0 ? 'text-green-600' : 'text-red-500' %>">
                            <%= product.stock > 0 ? "In Stock" : "Select a size" %>
                        </span>
                    </div>

                    <!-- Description with enhanced styling -->
                    <div class="border-t pt-8">
                        <h3 class="text-lg font-medium text-gray-900 mb-4 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            Product Description
                        </h3>
                        <div class="prose prose-indigo max-w-none bg-gray-50 p-6 rounded-xl">
                            <p class="text-gray-600 leading-relaxed"><%= product.description %></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Brand and Category Information Section with enhanced styling -->
            <div class="bg-gradient-to-r from-gray-50 to-white px-8 py-10">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <!-- Brand Information -->
                    <div class="bg-white rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow duration-300 border border-gray-100">
                        <div class="flex items-center mb-4">
                            <% if (product.brand.image) { %>
                                <img src="<%= product.brand.image %>" alt="<%= product.brand.name %>" class="h-12 w-auto mr-4 rounded-lg">
                            <% } %>
                            <h3 class="text-lg font-medium text-gray-900">About <%= product.brand.name %></h3>
                        </div>
                        <p class="text-gray-600 leading-relaxed">
                            <%= product.brand.description || "Information about this brand is currently unavailable." %>
                        </p>
                        <a href="/user/shop?brand=<%= product.brand.name %>" class="inline-flex items-center mt-4 text-sm font-medium text-indigo-600 hover:text-indigo-500 transition-colors">
                            View all <%= product.brand.name %> products
                            <svg class="inline-block w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </a>
                    </div>
                    
                    <!-- Category Information -->
                    <div class="bg-white rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow duration-300 border border-gray-100">
                        <div class="flex items-center mb-4">
                            <% if (product.categoryId.image) { %>
                                <img src="<%= product.categoryId.image %>" alt="<%= product.categoryId.name %>" class="h-12 w-auto mr-4 rounded-lg">
                            <% } %>
                            <h3 class="text-lg font-medium text-gray-900">About <%= product.categoryId.name %></h3>
                        </div>
                        <p class="text-gray-600 leading-relaxed">
                            <%= product.categoryId.description || "Information about this category is currently unavailable." %>
                        </p>
                        <a href="/user/shop?category=<%= product.categoryId.name %>" class="inline-flex items-center mt-4 text-sm font-medium text-indigo-600 hover:text-indigo-500 transition-colors">
                            Explore more <%= product.categoryId.name %>
                            <svg class="inline-block w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                            </svg>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Customer Reviews Section with enhanced styling -->
       <!-- Customer Reviews Section with enhanced styling -->
<section class="mt-12 bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
    <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-bold text-gray-900">Customer Reviews</h2>
        <% if (userHasPurchased) { %>
            <button onclick="openReviewModal()" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Add Your Review
            </button>
        <% } %>
    </div>
    
    <!-- Average Rating Display with enhanced styling -->
    <div class="bg-gray-50 p-6 rounded-xl mb-8">
        <div class="flex items-center">
            <div class="text-5xl font-bold text-indigo-600 mr-6"><%= averageRating.toFixed(1) %></div>
            <div>
                <div class="flex mb-1">
                    <% for(let i = 1; i <= 5; i++) { %>
                        <svg class="w-6 h-6 <%= i <= Math.round(averageRating) ? 'text-yellow-400' : 'text-gray-300' %>" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                        </svg>
                    <% } %>
                </div>
                <p class="text-sm text-gray-500">Based on <%= reviews.length %> reviews</p>
            </div>
        </div>
    </div>
    
    <!-- Review List with enhanced styling -->
    <div class="space-y-6">
        <% if (reviews.length > 0) { %>
            <div id="limited-reviews">
                <% reviews.slice(0, 4).forEach(review => { %>
                    <div class="border border-gray-100 rounded-xl p-6 hover:shadow-md transition-shadow duration-300 mb-6">
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600 font-bold mr-3">
                                    <%= review.userId.fullname.charAt(0) %>
                                </div>
                                <div>
                                    <p class="font-semibold text-gray-900"><%= review.userId.fullname %></p>
                                    <div class="flex">
                                        <% for(let i = 1; i <= 5; i++) { %>
                                            <svg class="w-4 h-4 <%= i <= review.rating ? 'text-yellow-400' : 'text-gray-300' %>" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                            </svg>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Edit & Delete Buttons (only for current user) -->
                            <% if (currentUser && review.userId._id.toString() === currentUser.id) { %>
                                <div class="flex space-x-2">
                                    <button class="text-indigo-600 hover:text-indigo-800 transition-colors" onclick="editReview('<%= review._id %>', '<%= review.rating %>', '<%= review.review %>')">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                        </svg>
                                    </button>
                                    <button class="text-red-500 hover:text-red-700 transition-colors" onclick="deleteReview('<%= review._id %>')">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                </div>
                            <% } %>
                        </div>
                        <p class="text-gray-600 mt-3 leading-relaxed"><%= review.review %></p>
                    </div>
                <% }) %>
            </div>

            <div id="all-reviews" class="hidden">
                <% reviews.forEach(review => { %>
                    <div class="border border-gray-100 rounded-xl p-6 hover:shadow-md transition-shadow duration-300 mb-6">
                        <div class="flex items-center justify-between mb-3">
                            <div class="flex items-center">
                                <div class="w-10 h-10 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600 font-bold mr-3">
                                    <%= review.userId.fullname.charAt(0) %>
                                </div>
                                <div>
                                    <p class="font-semibold text-gray-900"><%= review.userId.fullname %></p>
                                    <div class="flex">
                                        <% for(let i = 1; i <= 5; i++) { %>
                                            <svg class="w-4 h-4 <%= i <= review.rating ? 'text-yellow-400' : 'text-gray-300' %>" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                            </svg>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Edit & Delete Buttons (only for current user) -->
                            <% if (currentUser && review.userId._id.toString() === currentUser.id) { %>
                                <div class="flex space-x-2">
                                    <button class="text-indigo-600 hover:text-indigo-800 transition-colors" onclick="editReview('<%= review._id %>', '<%= review.rating %>', '<%= review.review %>')">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                        </svg>
                                    </button>
                                    <button class="text-red-500 hover:text-red-700 transition-colors" onclick="deleteReview('<%= review._id %>')">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                        </svg>
                                    </button>
                                </div>
                            <% } %>
                        </div>
                        <p class="text-gray-600 mt-3 leading-relaxed"><%= review.review %></p>
                    </div>
                <% }) %>
            </div>
            
            <!-- Button container -->
            <% if (reviews.length > 4) { %>
                <div id="see-all-container" class="text-center mt-6">
                    <button id="see-all-button" onclick="toggleReviews()" class="bg-white border border-indigo-600 text-indigo-600 px-6 py-2 rounded-lg font-medium hover:bg-indigo-50 transition-colors flex items-center mx-auto">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                        </svg>
                        See All Reviews (<%= reviews.length %>)
                    </button>
                </div>
                <div id="see-less-container" class="text-center mt-6 hidden">
                    <button id="see-less-button" onclick="toggleReviews()" class="bg-white border border-indigo-600 text-indigo-600 px-6 py-2 rounded-lg font-medium hover:bg-indigo-50 transition-colors flex items-center mx-auto">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
                        </svg>
                        Show Less
                    </button>
                </div>
            <% } %>
            
        <% } else { %>
            <div class="text-center py-12 bg-gray-50 rounded-xl">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
                </svg>
                <p class="text-gray-500 text-lg">No reviews yet. Be the first to share your experience!</p>
            </div>
        <% } %>
    </div>
</section>
        
        <!-- Related Products Section with enhanced styling -->
        <section class="mt-12 bg-white rounded-2xl shadow-lg border border-gray-100 p-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-8">Related Products</h2>
            
            <% if (relatedProducts && relatedProducts.length > 0) { %>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    <% relatedProducts.forEach(relatedProduct => { %>
                        <div class="group relative bg-white rounded-xl border overflow-hidden transition-all duration-300 hover:shadow-lg">
                            <!-- Product Image -->
                            <a href="/user/view-product/<%= relatedProduct._id %>" class="block aspect-w-1 aspect-h-1 overflow-hidden bg-gray-100">
                                <img src="<%= relatedProduct.images[0] %>" alt="<%= relatedProduct.name %>" 
                                     class="w-full h-64 object-cover object-center group-hover:scale-105 transition-transform duration-300">
                                <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-300"></div>
                            </a>
                            
                            <!-- Product Details -->
                            <div class="p-4">
                                <!-- Brand -->
                                <p class="text-sm text-gray-500 mb-1"><%= relatedProduct.brand.name %></p>
                                
                                <!-- Product Name -->
                                <h3 class="text-lg font-medium text-gray-900 mb-2 line-clamp-2">
                                    <a href="/user/product/<%= relatedProduct._id %>" class="hover:text-indigo-600 transition-colors">
                                        <%= relatedProduct.name %>
                                    </a>
                                </h3>
                                
                                <!-- Price -->
                                <div class="flex items-center justify-between">
                                    <span class="text-lg font-bold text-indigo-600">₹<%= relatedProduct.variants[0].regularPrice %></span>
                                    
                                    <!-- Wishlist Button -->
                                    <button class="wishlist-btn p-2 text-gray-400 hover:text-red-500 transition-colors" 
                                            data-product-id="<%= relatedProduct._id %>">
                                        <% if (wishlist && wishlist.includes(relatedProduct._id.toString())) { %>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-red-500" fill="currentColor" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 21l-1.45-1.32C5.4 15.36 2 12.28 2 8.5A5.5 5.5 0 0112 3a5.5 5.5 0 0110 5.5c0 3.78-3.4 6.86-8.55 11.18L12 21z" />
                                            </svg>
                                        <% } else { %>
                                            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                            </svg>
                                        <% } %>
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                </div>
            <% } else { %>
                <div class="text-center py-12 bg-gray-50 rounded-xl">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
                    </svg>
                    <p class="text-gray-500 text-lg">No related products found.</p>
                </div>
            <% } %>
            
            <!-- View More Button with enhanced styling -->
            <div class="mt-8 text-center">
                <a href="/user/shop?category=<%= product.categoryId.name %>" 
                   class="inline-flex items-center px-6 py-3 border border-indigo-600 text-indigo-600 bg-white rounded-lg font-medium hover:bg-indigo-50 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    View More <%= product.categoryId.name %>
                    <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                </a>
            </div>
        </section>
    </section>
</main>

<!-- Review Modal with enhanced styling -->
<div id="reviewModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white p-8 rounded-xl w-96 max-w-md shadow-2xl">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-xl font-semibold text-gray-900">Rate Your Product</h2>
            <button onclick="closeReviewModal()" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="stars mb-6 flex justify-center space-x-2">
            <% for(let i = 1; i <= 5; i++) { %>
                <span class="star text-4xl cursor-pointer transition-colors duration-200" onclick="setRating('<%= i %>')">&#9733;</span>
            <% } %>
        </div>
        <textarea id="reviewText" placeholder="Share your experience with this product..." class="border border-gray-300 rounded-lg w-full p-4 resize-none h-32 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200"></textarea>
        <input type="hidden" value="" id="reviewId"> <!-- Hidden input to store the review ID -->
        <button onclick="submitReview()" class="mt-6 w-full px-4 py-3 text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Submit Review
        </button>
    </div>
</div>

<style>
  #zoom-lens {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.3);
        cursor: none;
        box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.3);
    }

    #zoom-result {
        background-size: 1000px 1000px; /* This will be dynamically set */
    }

    /* Star rating styling */
    .star {
        color: #d1d5db; /* Gray by default */
        transition: color 0.2s ease;
    }
    
    .star:hover {
        color: #fbbf24; /* Yellow on hover */
    }

    /* Media query for mobile */
    @media (max-width: 768px) {
        #zoom-lens, #zoom-result {
            display: none !important;
        }
    }
</style>

<script>
     function toggleReviews() {
        const limitedReviews = document.getElementById('limited-reviews');
        const allReviews = document.getElementById('all-reviews');
        const seeAllContainer = document.getElementById('see-all-container');
        const seeLessContainer = document.getElementById('see-less-container');
        
        if (limitedReviews.classList.contains('hidden')) {
            // Switch to limited reviews
            limitedReviews.classList.remove('hidden');
            allReviews.classList.add('hidden');
            seeAllContainer.classList.remove('hidden');
            seeLessContainer.classList.add('hidden');
        } else {
            // Switch to all reviews
            limitedReviews.classList.add('hidden');
            allReviews.classList.remove('hidden');
            seeAllContainer.classList.add('hidden');
            seeLessContainer.classList.remove('hidden');
        }
    }
async function deleteReview(reviewId) {
    const confirmation = await Swal.fire({
        title: "Are you sure?",
        text: "This action cannot be undone!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#4f46e5",
        confirmButtonText: "Yes, delete it!"
    });

    if (!confirmation.isConfirmed) return;

    const response = await fetch("/user/delete-review", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ reviewId })
    });

    const result = await response.json();

    if (result.success) {
        Toastify({
    text: "Your review has been deleted.",
    duration: 3000,
    gravity: "bottom",  // Position at the bottom
    position: "center", // Center horizontally
    backgroundColor: "#4f46e5", // Indigo color for success
    className: "custom-toast",
    stopOnFocus: true
}).showToast();

        setTimeout(() => location.reload(), 1500);
    } else {
        Toastify({
    text: result.message || "An error occurred!",
    duration: 3000,
    gravity: "bottom",  // Position at the bottom
    position: "center", // Center horizontally
    backgroundColor: "#e3342f", // Red color for errors
    className: "custom-toast",
    stopOnFocus: true
}).showToast();

    }
}
let rating = 0;

function openReviewModal() {
    document.getElementById("reviewModal").classList.remove("hidden");
}

function closeReviewModal() {
    document.getElementById("reviewModal").classList.add("hidden");
}

// Set rating function
function setRating(value) {
    rating = value;
    document.querySelectorAll(".star").forEach((star, index) => {
        star.style.color = (index < value) ? "#fbbf24" : "#d1d5db";
    });
}

// Open Edit Modal with Existing Data
function editReview(reviewId, currentRating, currentReview) {
    console.log(reviewId)
    document.getElementById("reviewId").value = reviewId;
    document.getElementById("reviewText").value = currentReview;
    setRating(currentRating);  // Highlight stars based on current rating
    openReviewModal();
}

// Submit or Edit Review
async function submitReview() {
    let reviewText = document.getElementById("reviewText").value;
    let reviewId = document.getElementById("reviewId").value;
    let productId=document.getElementById("productId").value;
    
    
    if (rating === 0) {
        Toastify({
    text: "Please select at least one star.",
    duration: 3000,
    gravity: "bottom",  // Position at the bottom
    position: "center", // Center horizontally
    backgroundColor: "#ffcc00", // Yellow warning color
    className: "custom-toast",
    stopOnFocus: true
}).showToast();

        return;
    }

    let url = reviewId ? "/user/edit-review" : "/user/submit-review"; // If reviewId exists, update instead of adding
    console.log("URL : ",url,"REVIEW ID : ",reviewId,"RATING : ",rating,"REVIW TEXT : ",reviewText)

    const response = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ reviewId, rating, review: reviewText,productId })
    });

    const result = await response.json();
    console.log("result os here ",result)

    if (result.success) {
        Toastify({
            text: result.message,
            duration: 3000,
            gravity: "bottom",  // Shows at the bottom
            position: "center", // Centers it horizontally
            backgroundColor: "#4f46e5", // Indigo color
            stopOnFocus: true
        }).showToast();
        closeReviewModal();
        setTimeout(() => location.reload(), 1000);
    } else {
        Swal.fire({
            title: "Error!",
            text: result.message,
            icon: "error",
            confirmButtonColor: "#4f46e5"
        });
    }
}


 document.addEventListener("DOMContentLoaded", function() {
        const container = document.getElementById("image-magnifier-container");
        const mainImage = document.getElementById("mainImage");
        const lens = document.getElementById("zoom-lens");
        const result = document.getElementById("zoom-result");
        
        // Function to change main image when clicking thumbnails
        window.changeMainImage = function(src) {
            mainImage.src = src;
            updateZoomBackground(src);
        };

        // Function to update the zoom background
        function updateZoomBackground(imageSrc) {
            if (result) {
                result.style.backgroundImage = `url('${imageSrc}')`;
            }
        }
        
        // Set initial zoom background
        updateZoomBackground(mainImage.src);
        
        // Calculate zoom ratio
        const zoomRatio = 2.5;
        
        // Show lens and result when hovering over image
        container.addEventListener("mouseenter", function() {
            lens.classList.remove("hidden");
            result.classList.remove("hidden");
        });
        
        // Hide lens and result when leaving image
        container.addEventListener("mouseleave", function() {
            lens.classList.add("hidden");
            result.classList.add("hidden");
        });
        
        // Update lens position and result background position on mouse move
        container.addEventListener("mousemove", function(e) {
            // Get cursor position
            const rect = container.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            // Calculate lens position
            const lensWidth = lens.offsetWidth;
            const lensHeight = lens.offsetHeight;
            
            let lensX = x - lensWidth / 2;
            let lensY = y - lensHeight / 2;
            
            // Prevent lens from going outside image
            if (lensX < 0) lensX = 0;
            if (lensY < 0) lensY = 0;
            if (lensX > rect.width - lensWidth) lensX = rect.width - lensWidth;
            if (lensY > rect.height - lensHeight) lensY = rect.height - lensHeight;
            
            // Position the lens
            lens.style.left = lensX + "px";
            lens.style.top = lensY + "px";
            
            // Calculate result background position
            const bgX = -(lensX * zoomRatio);
            const bgY = -(lensY * zoomRatio);
            
            // Update result background position and size
            result.style.backgroundPosition = `${bgX}px ${bgY}px`;
            result.style.backgroundSize = `${rect.width * zoomRatio}px ${rect.height * zoomRatio}px`;
        });
    });

document.querySelectorAll(".wishlist-btn").forEach(button => {
    button.addEventListener("click", async function () {
        const productId = this.getAttribute("data-product-id");
        const heartIcon = this.querySelector("svg");
        const isWishlisted = heartIcon.classList.contains("text-red-500");
        const url = isWishlisted ? '/user/remove-from-wishlist' : '/user/add-to-wishlist';

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ productId })
            });

            const result = await response.json();
            console.log(result)

            if (result.success) {
                if (isWishlisted) {
                    // Change to unliked heart
                    heartIcon.classList.remove("text-red-500");
                    heartIcon.classList.add("text-gray-400");
                    location.reload()
                  
                    
                } else {
                    // Change to liked heart
                    heartIcon.classList.remove("text-gray-400");
                    heartIcon.classList.add("text-red-500");
                    location.reload()
                }
            } else {
                console.error("Failed to update wishlist");
            }
        } catch (error) {
            console.error("Error updating wishlist", error);
        }
    });
});
    // Your existing JavaScript code remains unchanged
    function selectSize(element, size, price) {
        console.log("Size selected:", size, "Price:", price,"element : ",element);

        document.querySelectorAll('.size-box').forEach(box => {
            box.classList.remove('border-indigo-500', 'bg-indigo-50');
        });
        const regularPrice = element.dataset.variantregularprice; 
        console.log("Regular price from dataset:", regularPrice);
        element.classList.add('border-indigo-500', 'bg-indigo-50');
        document.getElementById('selectedSize').value = size;
        document.getElementById('currentPrice').innerText = `₹${price}`;
        document.getElementById('oldPrice').innerText= `₹${regularPrice}`
    }

    function decreaseQty() {
    let qty = document.getElementById('quantity');
    let selectedSize = document.getElementById('selectedSize').value;
    let productId = "<%= product._id %>";

    if (parseInt(qty.innerText) > 1) {
        qty.innerText = parseInt(qty.innerText) - 1;
        // updateCartQuantity(productId, selectedSize, parseInt(qty.innerText));
    }
    }

    function increaseQty() {
    let qty = document.getElementById('quantity');
    let selectedSize = document.getElementById('selectedSize').value;
    let productId = "<%= product._id %>";

    qty.innerText = parseInt(qty.innerText) + 1;
    // updateCartQuantity(productId, selectedSize, parseInt(qty.innerText));
    }


    function updateCartQuantity(productId, selectedSize, quantity) {
    fetch("/user/update-cart-quantity", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            productId: productId,
            size: selectedSize,
            // quantity: quantity
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("Cart updated successfully!");
        } else {
            console.error("Failed to update cart:", data.message);
        }
    })
    .catch(error => {
        console.error("Error updating cart:", error);
    });
    }


    document.addEventListener("DOMContentLoaded", function () {
        const productVariants = JSON.parse(document.getElementById('productVariants').getAttribute('data-variants'));

        function selectSize(element, size, price) {
            console.log("Size selected:", size, "Price:", price);

            document.querySelectorAll('.size-box').forEach(box => {
                box.classList.remove('border-indigo-500', 'bg-indigo-50');
            });

            element.classList.add('border-indigo-500', 'bg-indigo-50');
            document.getElementById('selectedSize').value = size;
            document.getElementById('currentPrice').innerText = `₹${price}`;

            let availabilitySpan = document.getElementById('availabilityStatus');
            let selectedVariant = productVariants.find(variant => variant.size === size);

            if (selectedVariant) {
                if (selectedVariant.quantity > 0) {
                    availabilitySpan.innerText = "In Stock";
                    availabilitySpan.classList.remove('text-red-500');
                    availabilitySpan.classList.add('text-green-600');
                } else {
                    availabilitySpan.innerText = "Out of Stock";
                    availabilitySpan.classList.remove('text-green-600');
                    availabilitySpan.classList.add('text-red-500');
                }
            }
        }

        document.querySelectorAll('.size-box').forEach(button => {
            button.addEventListener('click', function () {
                selectSize(this, this.getAttribute('data-size'), this.getAttribute('data-price'));
            });
        });

        const addToCartButton = document.querySelector("#addToCart");
    
        addToCartButton.addEventListener("click", async function () {
    const selectedSize = document.getElementById("selectedSize").value;
    const productId = "<%= product._id %>"; // Ensure this is correctly populated in EJS

    const addtocartError = document.getElementById("addtocartError");
    addtocartError.textContent = "";
    addtocartError.classList.add("hidden");

    if (!selectedSize) {
        addtocartError.textContent = "Please select a size before adding to cart!";
        addtocartError.classList.remove("hidden");
        return;
    }

    console.log("Product ID:", productId, "Selected Size:", selectedSize);

    try {
        const response = await fetch("/user/add-to-cart", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                productId: productId,
                size: selectedSize
            })
        });

        const result = await response.json();

        if (result.success) {
            Toastify({
            text: "Product added to cart",
            duration: 3000, // 3 seconds
            close: true,
            gravity: "top", // "top" or "bottom"
            position: "right", // "left", "center", or "right"
            backgroundColor: "#4f46e5",
            stopOnFocus: true, // Prevent dismissing on hover
        }).showToast();
        } else {
            Swal.fire({
                title: "Error",
                text: result.message || "Failed to add product to cart.",
                icon: "error",
                confirmButtonColor: "#4f46e5"
            });
        }
    } catch (error) {
        console.error("Error adding to cart:", error);
        Swal.fire({
            title: "Error",
            text: "Something went wrong. Please try again.",
            icon: "error",
            confirmButtonColor: "#4f46e5"
        });
    }
});



});


    
</script>

<%- include("partials/footer") %>