<%- include("partials/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Toastify CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<!-- Toastify JS -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

</head>
<main class="bg-gray-50 py-8 md:py-12">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Page Title -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">Checkout</h1>
            <p class="mt-2 text-gray-600">Complete your purchase securely</p>
        </div>

        <!-- Products Section -->
        <div class="bg-white rounded-xl shadow-sm overflow-hidden mb-8">
            <div class="px-6 py-4 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-gray-800">Your Cart</h2>
            </div>
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50 text-gray-700 uppercase text-xs">
                        <tr>
                            <th class="px-6 py-3 text-left">Image</th>
                            <th class="px-6 py-3 text-left">Product</th>
                            <th class="px-6 py-3 text-center">Quantity</th>
                            <th class="px-6 py-3 text-right">Total</th>
                            <th class="px-6 py-3 text-center">Delete</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        <% if (data && Array.isArray(data) && data.length > 0) { %>
                            <% for (let i=0; i < data.length; i++) { %>
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="w-16 h-16 rounded-md overflow-hidden bg-gray-100">
                                            <img src="<%= data[i].productImage %>" alt="<%= data[i].productName %>" class="w-full h-full object-cover">
                                        </div>
                                    </td>
                                    <td class="px-6 py-4">
                                        <h3 class="font-medium text-gray-900"><%= data[i].productName %></h3>
                                        <p class="text-sm text-gray-500">Size: <%= data[i].size %></p>
                                        <p class="text-sm text-gray-500">Price: ₹<%= data[i].salePrice %></p>
                                    </td>
                                    <td class="px-6 py-4 text-center"><%= data[i].quantity %></td>
                                    <td class="px-6 py-4 text-right font-medium">₹<%= data[i].subtotal %></td>
                                    <td class="px-6 py-4 text-center">
                                        <a href="/deleteItem?id=<%= data[i].productId %>" 
                                           onclick="return confirm('Are you sure you want remove this product from cart?')"
                                           class="text-red-500 hover:text-red-700 transition-colors">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                        </a>
                                    </td>
                                </tr>
                            <% } %>
                        <% } else { %>
                            <tr>
                                <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                                    No products found
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Left Column (Address & Payment) -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Shipping Address Section -->
                <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                    
                    <div class="p-6">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <% if (userAddresses && userAddresses.length > 0) { %>
                                <% userAddresses.forEach((userAddress) => { %>
                                    <div class="border border-gray-200 hover:border-indigo-500 rounded-lg p-4 transition-all duration-200 relative group">
                                        <div class="absolute top-3 right-3">
                                               <input class="form-check-input h-5 w-5 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" 
                                                   type="radio" id="addressRadio<%= userAddress._id %>" 
                                                   name="selectedAddress" value="<%= userAddress._id %>" checked>
                                        </div>
                                        <div class="pt-2">
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                                                <%= userAddress.type %>
                                            </span>
                                            <h3 class="mt-2 font-semibold text-gray-900"><%= userAddress.name %></h3>
                                            <div class="mt-2 text-sm text-gray-500 space-y-1">
                                                <p><%= userAddress.address %></p>
                                                <p><%= userAddress.place %>, <%= userAddress.city %></p>
                                                <p><%= userAddress.district %>, <%= userAddress.state %> <%= userAddress.pinCode %></p>
                                                <p class="font-medium">Phone: <%= userAddress.mobile_number %></p>
                                            </div>
                                        </div>
                                        <div class="mt-4 flex space-x-3 opacity-0 group-hover:opacity-100 transition-opacity">
                                            <a href="/user/edit-address/<%= userAddress._id %>" 
                                               class="text-xs font-medium text-indigo-600 hover:text-indigo-500">
                                                Edit
                                            </a>
                                            <a href="#" 
   onclick="openModal('<%= userAddress._id %>')" 
   class="text-xs font-medium text-red-600 hover:text-red-500">
   Delete
</a>

                                        </div>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <div class="col-span-2 bg-blue-50 rounded-lg p-4 text-center">
                                    <p class="text-blue-700">No saved addresses found. Please add a new address.</p>
                                </div>
                            <% } %>
                            
                            <div class="border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center p-6 hover:border-indigo-500 transition-colors">
                                <a href="/user/add-order-address/<%=user.id %>" class="text-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                    </svg>
                                    <span class="mt-2 block text-sm font-medium text-gray-900">Add New Address</span>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Payment Methods Section -->
                <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h2 class="text-xl font-semibold text-gray-800">Payment Method</h2>
                    </div>
                    <div class="p-6 space-y-4">
                        <div class="relative border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                            <input class="payment absolute h-5 w-5 left-4 top-1/2 -translate-y-1/2 text-indigo-600 border-gray-300 focus:ring-indigo-500" 
                                   type="radio" value="cod" name="payment_option" id="CashOnDelivery"
                                   <% if (grandTotal < 1000) { %>disabled<% } %>>
                            <div class="pl-8">
                                <label class="font-medium text-gray-900 <% if (grandTotal > 1000) { %>text-gray-400<% } %>" for="CashOnDelivery">
                                    Cash on Delivery
                                </label>
                                <% if (grandTotal < 1000) { %>
                                    <p class="mt-1 text-xs text-red-500">Not available for orders below ₹1000</p>
                                <% } %>
                            </div>
                        </div>
                        
                        <div class="relative border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                            <input class="payment absolute h-5 w-5 left-4 top-1/2 -translate-y-1/2 text-indigo-600 border-gray-300 focus:ring-indigo-500" 
                                   type="radio" value="razorpay" name="payment_option" id="Razorpay" checked>
                            <div class="pl-8 flex items-center">
                                <label class="font-medium text-gray-900" for="Razorpay">
                                    Pay with Razorpay
                                </label>
                                <img src="https://cdn.razorpay.com/logo.svg" alt="Razorpay" height="18" class="ml-2 h-5">
                            </div>
                        </div>
                        
                        <div class="relative border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                            <input class="payment absolute h-5 w-5 left-4 top-1/2 -translate-y-1/2 text-indigo-600 border-gray-300 focus:ring-indigo-500" 
                                   type="radio" value="wallet" name="payment_option" id="wallet">
                            <div class="pl-8">
                                <label class="font-medium text-gray-900" for="wallet">
                                    Pay from Wallet
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Coupons Section -->
                <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h2 class="text-xl font-semibold text-gray-800">Apply Coupon</h2>
                    </div>
                    <div class="p-6">
                        <div class="flex space-x-2">
                            <input type="text" id="inputCoupon" placeholder="Enter coupon code" 
                                   class="flex-1 rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                            <button onclick="applyCoupon('<%= grandTotal %>')" id="applyButton" type="button"
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                Apply
                            </button>
                        </div>
                        
                        <div class="mt-6">
                            <h3 class="text-sm font-medium text-gray-900 mb-3">Available Coupons</h3>
                            <% if (Coupon && Coupon.length > 0) { %>
                                <div class="space-y-3">
                                    <% for (let i = 0; i < Coupon.length; i++) { %>
                                        <% 
                                        let currentDate = new Date(); // Get current date
                                        let expireDate = new Date(Coupon[i].expireOn); // Convert coupon expire date
                                        let isExpired = expireDate < currentDate; // Check if expired
                                    %>
                                    
                                    <div class="border border-gray-200 rounded-lg p-3 flex justify-between items-center bg-gradient-to-r from-gray-50 to-white">
                                        <div>
                                            <span class="text-sm font-semibold text-gray-900"><%= Coupon[i].name %></span>
                                            <p class="text-xs text-gray-500 mt-1">Save up to <%= Coupon[i].offerPrice %> ₹</p>
                                            <p class="text-xs <%= isExpired ? 'text-red-600 font-bold' : 'text-gray-500' %> mt-1">
                                                <%= isExpired ? 'Coupon Expired' : 'Valid until ' + expireDate.toDateString() %>
                                            </p>
                                        </div>
                                        <div>
                                            <button onclick="useCoupon('<%= Coupon[i].name %>')" id="useButton_<%= Coupon[i].name %>"
                                                    class="px-3 py-1 text-xs font-medium text-white rounded-md transition-colors
                                                    <%= isExpired ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700' %>" 
                                                    <%= isExpired ? 'disabled' : '' %>>
                                                Use
                                            </button>
                                            <button onclick="cancelCoupon('<%= Coupon[i].name %>')" id="cancelButton_<%= Coupon[i].name %>"
                                                    class="px-3 py-1 text-xs font-medium text-white bg-red-600 hover:bg-red-700 rounded-md transition-colors"
                                                    style="display: none;">
                                                Cancel
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <% } %>
                                </div>
                            <% } else { %>
                                <div class="bg-gray-50 rounded-lg p-4 text-center text-gray-500 text-sm">
                                    No coupons available at the moment.
                                </div>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Right Column (Order Summary) -->
            <div class="lg:col-span-1">
                <div class="bg-white rounded-xl shadow-sm overflow-hidden sticky top-6">
                    <div class="bg-gradient-to-r from-indigo-600 to-indigo-700 px-6 py-4">
                        <h2 class="text-xl font-semibold text-white">Order Summary</h2>
                    </div>
                    <div class="p-6 space-y-4">
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Actual Amounnt</span>
                            <span class="font-medium text-gray-900">₹<%= actualTotal.toFixed(2) %></span>
                        </div>
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Discount</span>
                            <span id="discount" class="text-green-600">
                                <% if (data && data.length > 0 && data[0].additionalDiscount) { %>
                                    -₹<%=Math.round(actualTotal - grandTotal) %>
                                <% } else { %>
                                    ₹0.00
                                <% } %>
                            </span>
                        </div>
                        
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Subtotal</span>
                            <span class="font-medium text-gray-900">₹<%= grandTotal.toFixed(2) %></span>
                        </div>
                        
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Shipping</span>
                            <span>
                                <% if (shippingCharge > 0) { %>
                                    <span class="font-medium text-gray-900">₹<%= shippingCharge.toFixed(2) %></span>
                                <% } else { %>
                                    <span class="text-green-600 font-medium">Free</span>
                                <% } %>
                            </span>
                        </div>
                        
                        
                        
                        <div class="flex justify-between text-sm">
                            <span class="text-gray-600">Coupon Discount</span>
                            <span id="couponDiscount" class="text-green-600">₹0.00</span>
                        </div>
                        
                        <div class="border-t border-gray-200 my-2 pt-4">
                            <div class="flex justify-between">
                                <span class="text-lg font-medium text-gray-900">Total</span>
                                <span id="totalValue" class="text-xl font-bold text-indigo-600">₹<%= finalTotal.toFixed(2) %></span>
                            </div>
                        </div>
                        
                        <button onclick="placeOrder('<%= user._id %>')"
                                class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                            Place Order
                        </button>
                        
                        <div class="flex items-center justify-center space-x-2 text-xs text-gray-500 mt-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                            </svg>
                            <span>Secure checkout</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center hidden">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
        <h2 class="text-lg font-semibold text-gray-900">Confirm Delete</h2>
        <p class="text-gray-600 mt-2">Are you sure you want to delete this address?</p>
        
        <!-- Buttons -->
        <div class="mt-4 flex justify-end space-x-2">
            <button onclick="closeModal()" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">
                Cancel
            </button>
            <button id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                Delete
            </button>
        </div>
    </div>
</div>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>




//for confirmation modal of remove addres
let deleteAddressId = null;

function openModal(addressId) {
    deleteAddressId = addressId; // Store the ID of the address to be deleted
    document.getElementById("deleteModal").classList.remove("hidden"); // Show modal
}

function closeModal() {
    document.getElementById("deleteModal").classList.add("hidden"); // Hide modal
}

document.getElementById("confirmDeleteBtn").addEventListener("click", async () => {
    if (!deleteAddressId) return;
    
    try {
        const response = await fetch(`/user/delete-address/${deleteAddressId}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" }
        });

        if (response.ok) {
            location.reload(); // Reload the page after successful deletion
        } else {
            alert("Failed to delete address.");
        }
    } catch (error) {
        console.error("Error:", error);
        alert("Something went wrong!");
    }

    closeModal();
});
    // Function to handle coupon application
    function applyCoupon(grandTotal) {
        const couponName = document.getElementById('inputCoupon').value;
        if (!couponName) {
            Swal.fire({
                title: 'Empty Coupon',
                text: 'Please enter a coupon code',
                icon: 'warning',
                timer: 2000
            });
            return;
        }
        
        // Send AJAX request to validate coupon
        fetch('/user/validateCoupon', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    body: JSON.stringify({
        couponName: couponName,
        grandTotal: grandTotal
    })
})
.then(response => response.json())
.then(data => {
    if (data.valid) {
        updatePriceWithCoupon(data.discount);
        Toastify({
    text: `🎉 Discount of ₹${data.discount} applied successfully! 🎉`,
    duration: 4000,  // Stay for 4 seconds
    gravity: "bottom",  // Appears at the bottom
    position: "center", // Centered horizontally
    style: {
        background: "linear-gradient(to right, #ff416c, #ff4b2b)", // Stylish red-orange gradient
        color: "#fff",  // White text
        fontWeight: "bold",
        borderRadius: "8px",
        padding: "12px",
        fontSize: "16px",
        textAlign: "center"
    },
    close: true // Show close button
}).showToast();


    } else {
        Toastify({
    text: "❌ Invalid Coupon! This coupon cannot be applied.",
    duration: 3000,  // Stay for 3 seconds
    gravity: "bottom",  // Appears at the bottom
    position: "center", // Centered horizontally
    style: {
        background: "linear-gradient(to right, #ff5f6d, #ffc371)", // Red to Orange Gradient
        color: "#fff",  // White text
        fontWeight: "bold",
        borderRadius: "8px",
        padding: "12px",
        fontSize: "16px",
        textAlign: "center"
    },
    close: true // Show close button
}).showToast();

    }
})
.catch(() => {
    Swal.fire({
        title: 'Error',
        text: 'Failed to validate coupon',
        icon: 'error',
        timer: 2000
    });
});

    }
    
    // Function to use coupon from available coupons list
    function useCoupon(couponName) {
        document.getElementById('inputCoupon').value = couponName;
        document.getElementById(`useButton_${couponName}`).style.display = 'none';
        document.getElementById(`cancelButton_${couponName}`).style.display = 'inline-block';
        
        // Auto-apply the selected coupon
        applyCoupon('<%= grandTotal %>');
    }
    
    // Function to cancel applied coupon
    function cancelCoupon(couponName) {
        document.getElementById('inputCoupon').value = '';
        document.getElementById(`useButton_${couponName}`).style.display = 'inline-block';
        document.getElementById(`cancelButton_${couponName}`).style.display = 'none';
        
        // Reset price to original
        document.getElementById('couponDiscount').textContent = '₹0.00';
        document.getElementById('totalValue').textContent = '₹<%= finalTotal.toFixed(2) %>';
        
        Swal.fire({
            title: 'Coupon Removed',
            text: 'Coupon has been removed',
            icon: 'info',
            timer: 1500
        });
    }
    
    // Helper function to update prices when coupon is applied
    function updatePriceWithCoupon(discountAmount) {
        const couponDiscountElement = document.getElementById('couponDiscount');
        const totalValueElement = document.getElementById('totalValue');
        
        // Update coupon discount display
        couponDiscountElement.textContent = `-₹${discountAmount.toFixed(2)}`;
        
        // Get current total and calculate new total
        const currentTotal = "<%= finalTotal %>";
        const newTotal = currentTotal - discountAmount;
        
        // Update total display
        totalValueElement.textContent = `₹${newTotal.toFixed(2)}`;
    }

    // Function to place order
    async function placeOrder(userId) {
    let address = document.querySelector("input[name='selectedAddress']:checked")?.value;
    let payment = document.querySelector("input[name='payment_option']:checked")?.value;

    // Get the total amount from the display
    const sumText = document.getElementById("totalValue").textContent;
    const numericValue = parseFloat(sumText.replace(/[^\d.]/g, ''));

    // Get discount amount if applied
    const discountText = document.getElementById("discount").textContent;
    const discountValue = parseFloat(discountText.replace(/[^\d.]/g, '')) || 0;

    // Get coupon discount if applied
    const couponDiscountText = document.getElementById("couponDiscount").textContent;
    const couponDiscountValue = parseFloat(couponDiscountText.replace(/[^\d.]/g, '')) || 0;

    const couponName=document.getElementById("inputCoupon").value

    // Validate selections
    if (!payment) {
        Swal.fire({
            title: 'Payment Method Required',
            text: 'Please select a payment method',
            icon: 'warning',
            timer: 3000
        });
        return;
    }

    if (!address) {
        Swal.fire({
            title: 'Address Required',
            text: 'Please select a delivery address',
            icon: 'warning',
            timer: 3000
        });
        return;
    }

    if (payment === "cod" && numericValue > 10000) {
        Swal.fire({
            title: 'COD Not Allowed',
            text: 'Orders above ₹10000 are not eligible for Cash on Delivery',
            icon: 'warning',
            timer: 3000
        });
        return;
    }
   
    try {
        const orderData = {
            totalPrice: numericValue,
            createdOn: new Date().getTime(),
            date: new Date(),
            addressId: address,
            payment: payment,
            couponDiscountText:couponDiscountText,
            couponDiscountValue:couponDiscountValue,
            discountText:discountText,
            discountValue:discountValue,
            couponName:couponName || ""

        };

        // Handle Cash on Delivery
        if (payment === "cod") {
            const response = await fetch('/user/cash-on-delivery', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            });

            const result = await response.json();
            console.log(result)
            let orderId = result.order._id;

            if (result.method === "cod") {
                // let audio = new Audio('/audios/success-sound.mp3');
                // audio.play();
                // Swal.fire({
                //     title: "Order Placed",
                //     text: "Your order has been placed successfully",
                //     icon: "success",
                //     showCancelButton: true,
                //     confirmButtonText: "View Order",
                //     cancelButtonText: "Continue Shopping",
                //     reverseButtons: true
                // }).then((result) => {
                //     if (result.value) {
                //         location.href = `/user/orderDetails?id=${orderId}`;
                //     } else if (result.dismiss === "cancel") {
                //         location.href = '/user/shop';
                //     }
                // });
                location.href = `/user/payment-success-page?id=${orderId}`;
            }
        } 
        // Handle Wallet Payment
        else if (payment === "wallet") {
            const response = await fetch('/user/wallet-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            });
            
            const result = await response.json();
            let orderId = result.order?._id;
            
            if (result.payment === true) {
                Swal.fire({
                    title: "Order Placed",
                    text: "Your order has been placed successfully",
                    icon: "success",
                    showCancelButton: true,
                    confirmButtonText: "View Order",
                    cancelButtonText: "Continue Shopping",
                    reverseButtons: true
                }).then((result) => {
                    if (result.value) {
                        location.href = `/user/orderDetails?id=${orderId}`;
                    } else if (result.dismiss === "cancel") {
                        location.href = '/user/shop';
                    }
                });
            } else {
                Swal.fire({
                    title: "Payment Failed",
                    text: "Insufficient wallet balance",
                    icon: "error",
                    confirmButtonText: "OK"
                });
            }
        } 
        // Handle Razorpay Payment
        
        else if (payment === "razorpay") {
            console.log(orderData)
            const response = await fetch("/user/payment/create-order", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(orderData)
            });

            const order = await response.json();
            console.log("resposne of create order : ",order)

            var globalOrderId;
            globalOrderId = order.newOrder._id
            
            var options = {
    "key": "<%= process.env.RAZORPAY_KEY_ID %>",
    "amount": order.order.amount,
    "currency": "INR",
    "name": "Stridex",
    "description": "Purchase Payment",
    "image": "https://firebasestorage.googleapis.com/v0/b/ecommerce-397a7.appspot.com/o/logo.jpg?alt=media&token=07b6be19-1ce8-4797-a3a0-f0eaeaafedad",
    "order_id": order.newOrder.orderId,
    "handler": async function (response) {
        console.log("✅ Razorpay Payment Response:", response)
        const requestData = {
            ...response,
            addressId: orderData.addressId,
            total: orderData.totalPrice
        };
        console.log("thit is requset order data : ",requestData)

        const verifyResponse = await fetch("/user/payment/verify-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(requestData)
        });

        console.log("✅ Verify Payment API Request Sent!");

        const verifyResult = await verifyResponse.json();
        console.log("✅ Verify Payment Result:", verifyResult);

        const orderId = verifyResult.order._id;
        console.log("this is URL order Id:", orderId);
        

        if (verifyResult.success) {
            location.href = `/user/payment-success-page?id=${orderId}`;
        } else {
            console.error("⚠️ Payment Verification Failed:", verifyResult);
            alert("Payment Failed! Redirecting to failure page...");
            location.href = `/user/order-failure/${orderId}`;
        }
    },
    "prefill": {
        "name": "<%= user.fullname %>",
        "email": "<%= user.email %>",
        "contact": "<%= user.phoneNumber || '9999999999' %>"
    },
    "theme": { "color": "#4f46e5" },
    "modal": {
        "escape": false,  // Prevent closing with Esc key
        "backdropclose": false,  // Prevent closing by clicking outside
        "ondismiss": function () {
            console.log("❌ Razorpay modal closed by user.",globalOrderId);
            location.href = `/user/order-failure/${globalOrderId}`;
        }
    }
};

var rzp1 = new Razorpay(options);

// Handle failed payment
rzp1.on('payment.failed', async function (response) {
    console.error("❌ Razorpay Payment Failed:", response.error);
    console.log("Failure order Id:",);
    location.href = `/user/order-failure/${globalOrderId}`;
    // try {
    //     const failureResponse = await fetch("/user/payment/payment-failed", {
    //         method: "POST",
    //         headers: { "Content-Type": "application/json" },
    //         body: JSON.stringify({
    //             orderId: order.id,
    //             reason: response.error.reason,
    //             message: response.error.description
    //         })
    //     });

    //     const failureResult = await failureResponse.json();
    //     console.log("⚠️ Order Failure API Response:", failureResult);

    //     const failedOrderId = failureResult.orderId;
    //     location.href = `/user/order-failure/${failedOrderId}`;

    // } catch (error) {
    //     console.error("⚠️ Error reporting failed payment:", error);
    // }

});

rzp1.open();

        } else {
            Swal.fire({
                title: 'Error',
                text: "Invalid payment method. Please try again.",
                icon: 'error',
                timer: 3000
            });
            location.href = "/user/order-failure";
        }
    } catch (error) {
        console.error("Order placement error:", error);
        Swal.fire({
            title: 'Error',
            text: "Something went wrong. Please try again.",
            icon: 'error',
            timer: 3000
        });
      
    }
}

</script>

<%- include("partials/footer") %>