<%- include("partials/header") %>
<style>
    .custom-toast {
        bottom: 80px !important; /* Adjust this value to move it slightly above the bottom */
    }
</style>
<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-2xl mx-auto">
    <!-- Card Container -->
    <div class="bg-white rounded-2xl shadow-xl overflow-hidden">
      <!-- Header -->
      <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-8 py-6">
        <h3 class="text-2xl font-bold text-white flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
          Add New Address
        </h3>
      </div>

      <!-- Form -->
      <div class="px-8 py-6">
        <form id="addAddressForm" class="space-y-6">
          <!-- Personal Information Section -->
          <div class="bg-blue-50 rounded-lg p-4 space-y-4">
            <h4 class="text-sm font-semibold text-blue-800 uppercase tracking-wide">Personal Information</h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Full Name -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Full Name</label>
                
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                  </div>
                  <input type="text" id="name" 
                    class="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Enter your full name">
                    
                </div>
                <p id="nameError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>

              <!-- Mobile Number -->
              <div class="space-y-1">
                
                <label class="block text-sm font-medium text-gray-700">Mobile Number</label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                    </svg>
                  </div>
                  <input type="text" id="mobile_number"
                    class="pl-10 block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                    placeholder="Enter mobile number">
                    
                </div>
                <p id="mobileError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>
            </div>
          </div>

          <!-- Location Section -->
          <div class="bg-indigo-50 rounded-lg p-4 space-y-4">
            <h4 class="text-sm font-semibold text-indigo-800 uppercase tracking-wide">Location Details</h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <!-- Country -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Country</label>
                <input type="text" id="country" 
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Enter country">
                  <p id="countryError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>

              <!-- State -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">State</label>
                <input type="text" id="state" 
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Enter state">
                  <p id="stateError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>

              <!-- District -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">District</label>
                <input type="text" id="district" 
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Enter district">
                  <p id="districtError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>

              <!-- City -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">City</label>
                <input type="text" id="city" 
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Enter city">
                  <p id="cityError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>

              <!-- Place -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Place</label>
                <input type="text" id="place" 
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Enter place">
                  <p id="placeError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>

              <!-- Pincode -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Pincode</label>
                <input type="text" id="pinCode" 
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Enter pincode">
                  <p id="pincodeError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>
            </div>
          </div>

          <!-- Address Details Section -->
          <div class="bg-blue-50 rounded-lg p-4 space-y-4">
            <h4 class="text-sm font-semibold text-blue-800 uppercase tracking-wide">Address Details</h4>
            <div class="space-y-4">
              <!-- Full Address -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Full Address</label>
                <textarea id="address" rows="3" 
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="Enter your complete address"></textarea>
                  <p id="addressError" class="text-red-500 text-sm mt-1 hidden"></p>
              </div>

              <!-- Address Type -->
              <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Address Type</label>
                <p id="typeError" class="text-red-500 text-sm mt-1 hidden"></p>

                <select id="type" required
                  class="block w-full rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                  <option value="Home">Home</option>
                  <option value="Work">Work</option>
                </select>
              </div>
            </div>
          </div>
          <!-- for location -->
          <button type="button" onclick="getUserLocation()"
  class="w-full flex justify-center py-2 px-4 mt-3 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none">
   Use My current Location
</button>


          <!-- Submit Button -->
          <button type="submit"
            class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transform transition-all duration-150 hover:scale-[1.02]">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
            Save Address
          </button>
        </form>
      </div>
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- Toastify CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<!-- Toastify JS -->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script>

async function getUserLocation() {
    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(async function (position) {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;

            console.log(`Latitude: ${lat}, Longitude: ${lon}`);

            // Call reverse geocoding API
            fetchAddressFromCoords(lat, lon);
        }, function (error) {
            console.error("Error fetching location:", error);
            alert("Unable to fetch location. Please enable GPS.");
        });
    } else {
        alert("Geolocation is not supported by your browser.");
    }
}

async function fetchAddressFromCoords(lat, lon) {
    try {
        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
        const data = await response.json();

        console.log("Address Data:", data);

        // Autofill form fields
        document.getElementById("country").value = data.address.country || "";
        document.getElementById("state").value = data.address.state || "";
        document.getElementById("district").value = data.address.county || "";
        document.getElementById("city").value = data.address.city || data.address.town || data.address.village || "";
        document.getElementById("place").value = data.address.suburb || "";
        document.getElementById("pinCode").value = data.address.postcode || "";
        document.getElementById("address").value = data.display_name || "";

        Swal.fire({
            title: "Location Found!",
            text: "Your address has been autofilled successfully.",
            icon: "success",
            confirmButtonColor: "#3085d6",
            confirmButtonText: "OK"
        });

    } catch (error) {
        console.error("Error fetching address:", error);
       Swal.fire({
            title: "Error!",
            text: "Failed to fetch your address.",
            icon: "error",
            confirmButtonColor: "#d33",
            confirmButtonText: "Try Again"
        });

    }
}

document.addEventListener("DOMContentLoaded", function () {
    
    document.getElementById('addAddressForm').addEventListener('submit', async function(event) {
        event.preventDefault();

        const addressData = {
    name: document.getElementById('name').value.trim(),
    mobile_number: document.getElementById('mobile_number').value.trim(),
    country: document.getElementById('country').value.trim(),
    state: document.getElementById('state').value.trim(),
    district: document.getElementById('district').value.trim(),
    city: document.getElementById('city').value.trim(),
    place: document.getElementById('place').value.trim(),
    pinCode: document.getElementById('pinCode').value.trim(),
    address: document.getElementById('address').value.trim(),
    type: document.getElementById('type').value.trim()
};

// Get error message elements
const errors = {
    name: document.getElementById("nameError"),
    mobile_number: document.getElementById("mobileError"),
    country: document.getElementById("countryError"),
    state: document.getElementById("stateError"),
    district: document.getElementById("districtError"),
    city: document.getElementById("cityError"),
    place: document.getElementById("placeError"),
    pinCode: document.getElementById("pincodeError"),
    address: document.getElementById("addressError"),
    type: document.getElementById("typeError"),
};

// Reset error messages
Object.values(errors).forEach(error => {
    error.textContent = "";
    error.classList.add("hidden");
});

let isValid = true;

// Function to check if a field is empty
function validateField(field, message) {
    if (!addressData[field]) {
        errors[field].textContent = message;
        errors[field].classList.remove("hidden");
        isValid = false;
    }
}

// Validate all fields
validateField("name", "Name is required.");
validateField("mobile_number", "Mobile number is required.");
validateField("country", "Country is required.");
validateField("state", "State is required.");
validateField("district", "District is required.");
validateField("city", "City is required.");
validateField("place", "Place is required.");
validateField("pinCode", "Pin Code is required.");
validateField("address", "Address is required.");
validateField("type", "Address type is required.");

// Additional validation for mobile number
const mobileRegex = /^[6-9]\d{9}$/;
if (addressData.mobile_number && !mobileRegex.test(addressData.mobile_number)) {
    errors.mobile_number.textContent = "Enter a valid 10-digit mobile number.";
    errors.mobile_number.classList.remove("hidden");
    isValid = false;
}

// Additional validation for pin code (India: 6 digits)
const pinCodeRegex = /^\d{6}$/;
if (addressData.pinCode && !pinCodeRegex.test(addressData.pinCode)) {
    errors.pinCode.textContent = "Enter a valid 6-digit pin code.";
    errors.pinCode.classList.remove("hidden");
    isValid = false;
}

// Final validation check
if (isValid) {
    console.log("Validation Passed!", addressData);
    // Proceed with form submission or API request
} else {
    console.log("Validation Failed. Please fill in all required fields.");
}


        try {
            const response = await fetch('/user/verify-add-address', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(addressData)
            });

            const result = await response.json();
            if (result.success) {
                Toastify({
                text: result.message, // Displaying the message
                duration: 3000, // 3 seconds
                gravity: "bottom", // Keep it at the bottom
                position: "center", // Center it horizontally
                backgroundColor: "#0ea5e9", // Success color
                className: "custom-toast", // Custom class for additional styling
                stopOnFocus: true
                }).showToast();
                if (document.referrer) window.location.href = document.referrer;                 
                else window.location.href = result.redirectUrl;

            } else {
                alert(result.message);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Failed to add address.");
        }
    });
});

</script>
<%- include("partials/footer") %>