<%- include("partials/header") %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  .pagination-container {
    text-align: center;
  }
  .pagination li {
  display: inline-block;
}

  .pagination a,
  .pagination .current-page {
    display: inline-block;
    padding: 5px 10px;
    margin: 0 2px;
    border: 1px solid #ddd;
    text-decoration: none;
    color: #333;
  }
  .pagination a:hover {
    background-color: #f5f5f5;
  }
  .error-message {
    color: red;
  }
  /* Example theme colors; adjust these as needed */
  .btn-edit {
    background-color: #007bff;
    border-color: #007bff;
    color: #fff;
  }
  .btn-edit:hover {
    background-color: #0069d9;
    border-color: #0062cc;
  }
  .btn-unlisted {
    background-color: #6c757d;
    border-color: #6c757d;
    color: #fff;
  }
  .btn-unlisted:hover {
    background-color: #5a6268;
    border-color: #545b62;
  }
</style>
  <!-- Toastify & Bootstrap Scripts -->
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<section class="content-main">
  <div class="content-header">
    <div>
      <h2 class="content-title card-title">Brands</h2>
    </div>
    <!-- searah bar -->

    <div class="d-flex gap-3 align-items-center">
      <form action="/admin/brands" method="GET" id="search-form">
        <div class="input-group">
          <input type="text" name="search" class="form-control" placeholder="Search brand" id="searchInput" value="<%= search %>">
          <button class="btn btn-outline-secondary" type="submit" id="searchBtn">
            <i class="bi bi-search"></i>
          </button>
          <button class="btn btn-outline-secondary" type="button" id="resetBtn">
            <i class="bi bi-arrow-clockwise"></i>
          </button>
        </div>
      </form>
    </div>
    <div class="d-flex justify-content-end">
      <!-- Plain button to trigger modal -->
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBrandModal">
        Add Brand
      </button>
    </div>
  </div>  

  <div class="card">
    <div class="card-body">
      <div class="row">
        <!-- Brand Table -->
        <div class="col-md-12">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Image</th> <!-- Added missing header for Image -->
                  <th>Brand</th>
                  <th>Description</th>
                  <!-- <th>Status</th> -->
                  <th>Actions</th> <!-- Ensure Actions column is here -->
                </tr>
              </thead>
              <tbody>
                <% if (brands.length > 0) { %>
                  <% brands.forEach(brand => { %>
                    <tr>
                      <td class="align-middle">
                        <% if (brand.image) { %>
                          <img src="<%= brand.image %>" alt="Brand Image" class="brand-thumbnail brand-image-popup" style="max-width: 50px; max-height: 50px; object-fit: cover; border-radius: 5px;"/>
                        <% } else { %>
                          <i class="bi bi-card-image" style="font-size: 1.5rem;"></i>
                        <% } %>
                      </td>
                      <td class="align-middle"><%= brand.name %></td>
                      <td class="text-start">
                        <% 
                          const maxLength = 50;
                          let fullDesc = brand.description;
                          let truncated = fullDesc.length > maxLength ? fullDesc.substring(0, maxLength) + "..." : fullDesc;
                        %>
                        <span class="category-desc" data-full="<%= fullDesc %>">
                          <%= truncated %>
                        </span>
                        <% if (fullDesc.length > maxLength) { %>
                          <a href="javascript:void(0);" class="read-more-link">read more</a>
                        <% } %>
                      </td>
                      <td class="align-middle">
                        <button class="btn toggle-status-btn <%= brand.isListed ? 'btn-success' : 'btn-danger' %>" 
                          data-id="<%= brand._id %>">
                          <%= brand.isListed ? 'Listed' : 'unlisted' %>
                        </button>
                        <button class="btn btn-edit editBrandBtn"
                          data-bs-toggle="modal" data-bs-target="#editBrandModal"
                          data-id="<%= brand._id %>"
                          data-name="<%= brand.name %>"
                          data-description="<%= brand.description %>"
                          data-image="<%= brand.image %>">
                          Edit
                        </button>
                        
                      </td>
                    </tr>
                  <% }) %>
                <% } else { %>
                  <tr>
                    <td colspan="5" class="text-center">No brands available</td>
                  </tr>
                <% } %>
              </tbody>
              
              
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Pagination -->

<nav class="text-center">
  <ul class="pagination justify-content-center">
    <% if (currentPage > 1) { %>
      <li class="page-item">
        <a class="page-link" href="?page=<%= currentPage - 1 %>&search=<%= search %>">Previous</a>
      </li>
    <% } %>
    <% for (let i = 1; i <= totalPages; i++) { %>
      <li class="page-item <%= i === currentPage ? 'active' : '' %>">
        <a class="page-link" href="?page=<%= i %>&search=<%= search %>"><%= i %></a>
      </li>
    <% } %>
    <% if (currentPage < totalPages) { %>
      <li class="page-item">
        <a class="page-link" href="?page=<%= currentPage + 1 %>&search=<%= search %>">Next</a>
      </li>
    <% } %>
  </ul>
</nav>

</section>

<!-- Add Brand Modal -->
<div class="modal fade" id="addBrandModal" tabindex="-1" aria-labelledby="addBrandModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <!-- Change form to include enctype for file upload -->
      <form   id="brand-form" enctype="multipart/form-data">
        <div class="modal-header">
          <h5 class="modal-title" id="addBrandModalLabel">Add Brand</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-4">
            <label for="brand_name" class="form-label">Brand Name</label>
            <input type="text" id="brandName" name="name" placeholder="Type here" class="form-control" />
          </div>
          <div class="mb-4">
            <label for="brand_description" class="form-label">Description</label>
            <textarea name="description" id="brandDescription" placeholder="Enter brand description" class="form-control"></textarea>
          </div>
          <div class="mb-4">
            <label for="brand_image" class="form-label">Brand Image</label>
            <input type="file" id="brandImage" name="image" class="form-control" accept="image/png, image/jpeg, image/jpg" />
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Add Brand</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        </div>
      </form>
    </div>
  </div>
</div>


 <!-- Edit Brand Modal -->
<div class="modal fade" id="editBrandModal" tabindex="-1" aria-labelledby="editBrandModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="edit-brand-form" enctype="multipart/form-data">
        <div class="modal-header">
          <h5 class="modal-title" id="editBrandModalLabel">Edit Brand</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="editBrandId" name="id">

          <div class="mb-4">
            <label for="editBrandName" class="form-label">Brand Name</label>
            <input type="text" id="editBrandName" name="name" class="form-control" />
          </div>

          <div class="mb-4">
            <label for="editBrandDescription" class="form-label">Description</label>
            <textarea id="editBrandDescription" name="description" class="form-control"></textarea>
          </div>

          <div class="mb-4">
            <label class="form-label">Brand Image</label>
            <input type="file" id="editBrandImage" name="image" class="form-control" accept="image/png, image/jpeg, image/jpg" />
            <div class="mt-2">
              <img id="editImgPreview" src="" alt="Brand Image" class="brand-thumbnail" style="max-width: 100px; display: none;">
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Update Brand</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        </div>
      </form>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<%- include("partials/footer") %>
<script>
  document.addEventListener("DOMContentLoaded",function(){

    //search function
    const searchForm = document.getElementById("search-form");
      searchForm.addEventListener("submit", function(e) {
        e.preventDefault();
        const formData = new FormData(searchForm);
        const queryParams = new URLSearchParams(formData);
        window.location.href = `/admin/brands?${queryParams.toString()}`;
      });
      const resetBtn = document.getElementById("resetBtn");
      resetBtn.addEventListener("click", function() {
        document.getElementById("searchInput").value = "";
        window.location.href = "/admin/brands";
      });


const brandForm = document.getElementById("brand-form");
brandForm.addEventListener("submit", async function (e) {
  e.preventDefault();
  const formData = new FormData(this); 
  console.log(formData)

  try {
    const response = await fetch("/admin/add-brands", {
      method: "POST",
      body: formData // FormData handles the multipart/form-data header automatically
    });

    const data = await response.json();
    if (data.success) {
      Toastify({
        text: data.message,
        duration: 3000,
        close: true,
        gravity: "top",
        position: "right",
        backgroundColor: "#28a745"
      }).showToast();
      setTimeout(() => location.reload(), 1500);
    } else {
      Toastify({
        text: data.message || "Something went wrong!",
        duration: 3000,
        close: true,
        gravity: "top",
        position: "right",
        backgroundColor: "#dc3545"
      }).showToast();
    }
  } catch (error) {
    console.error(error);
  }
});

document.querySelectorAll(".editBrandBtn").forEach(button => {
    button.addEventListener("click", function() {
      const brandId = this.getAttribute("data-id");
      const brandName = this.getAttribute("data-name");
      const brandDescription = this.getAttribute("data-description");
      const brandImage = this.getAttribute("data-image");

      document.getElementById("editBrandId").value = brandId;
      document.getElementById("editBrandName").value = brandName;
      document.getElementById("editBrandDescription").value = brandDescription;

      // Preview existing image
      const imgPreview = document.getElementById("editImgPreview");
      if (brandImage) {
        imgPreview.src = brandImage;
        imgPreview.style.display = "block";
      } else {
        imgPreview.style.display = "none";
      }
    });
  });

  // Image Preview for New Upload
  document.getElementById("editBrandImage").addEventListener("change", function() {
    const file = this.files[0];
    const imgPreview = document.getElementById("editImgPreview");
    if (file) {
      const reader = new FileReader();
      reader.onload = function() {
        imgPreview.src = reader.result;
        imgPreview.style.display = "block";
      };
      reader.readAsDataURL(file);
    }
  });

  // Handle Edit Brand Submission
  document.getElementById("edit-brand-form").addEventListener("submit", async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    for (const [key, value] of formData.entries()) {
    console.log(`${key}:`, value);
  }

    const brandId = document.getElementById("editBrandId").value;
    console.log(brandId);
    
    
    try {
      const response = await fetch(`/admin/edit-brands/${brandId}`, {
        method: "PUT",
        body: formData
      });

      const data = await response.json();
      console.log(data,"this is response of data")
      if (data.success) {
        Toastify({
          text: data.message,
          duration: 3000,
          close: true,
          gravity: "top",
          position: "right",
          backgroundColor: "#28a745"
        }).showToast();
        setTimeout(() => location.reload(), 1500);
      } else {
        Toastify({
          text: data.message || "Something went wrong!",
          duration: 3000,
          close: true,
          gravity: "top",
          position: "right",
          backgroundColor: "#dc3545"
        }).showToast();
      }
    } catch (error) {
      console.error(error);
    }
  });
  // Read More functionality for long descriptions
  document.querySelectorAll(".read-more-link").forEach(link => {
        link.addEventListener("click", function() {
          const fullDescription = this.previousElementSibling.getAttribute("data-full");
          Swal.fire({
            title: "Full Description",
            html: `<p style="text-align: left;">${fullDescription}</p>`,
            icon: "info",
            confirmButtonText: "Close"
          });
        });
      });


      //for list and unlisted
      document.querySelectorAll(".toggle-status-btn").forEach(button => {
      button.addEventListener("click", async function () {
        console.log("here");
        
      const brandId = this.dataset.id;
      console.log(brandId);
      
      const currentStatus = this.textContent.trim();
      const newStatus = currentStatus === "Listed" ? "unlisted" : "Listed";

      Swal.fire({
      title: `Are you sure?`,
      text: `Do you want to ${newStatus.toLowerCase()} this category?`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#28a745",
      cancelButtonColor: "#dc3545",
      confirmButtonText: `Yes, ${newStatus}`,
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          console.log("send");
          
          const response = await fetch(`/admin/list-unlisted/${brandId}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" }
          });
          const data = await response.json();
          if (data.success) {
            this.textContent = data.newStatus ? "Listed" : "unlisted";
            this.classList.toggle("btn-success");
            this.classList.toggle("btn-danger");
            Swal.fire("Success", `Category is now ${newStatus.toLowerCase()}.`, "success");
          } else {
            Swal.fire("Error", data.message || "Failed to update status", "error");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error", "Something went wrong!", "error");
        }
      }
    });
  });
});
  })
  
</script>
