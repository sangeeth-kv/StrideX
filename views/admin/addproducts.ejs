<%- include("partials/header") %>

<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>

<style>
   .error-message {
       color: red;
   }
   .thumbnails-container {
       display: flex;
       overflow-x: auto;
   }
   .thumbnail {
       margin-right: 10px;
   }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form id="productForm">
                        <div class="mb-4">
                            <label class="form-label">Product Name</label>
                            <input type="text" name="productName" class="form-control border" required>
                            <div id="name-error" class="error-message"></div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Brand</label>
                            <select class="form-select border" name="brand" id="brand">
                                <option value="">Select Brand</option>
                            </select>
                            <div id="brand-error" class="error-message"></div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Category</label>
                            <select class="form-select border" name="categoryId" id="categoryId">
                                <option value="">Select Category</option>
                            </select>
                            <div id="categoryId-error" class="error-message"></div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label">Full description</label>
                            <textarea name="description" class="form-control border" rows="4" required></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- <div class="mb-4">
                            <label class="form-label">Offer (%)</label>
                            <input type="number" name="offer" class="form-control border">
                        </div> -->

                        <h4>Product Variants</h4>
                        <div id="variantsContainer">
                            <div class="variant">
                                <div class="mb-2">
                                    <label class="form-label">Size</label>
                                    <input type="text" name="size[]" class="form-control border" required>
                                </div>
                                <div class="mb-2">
                                    <label class="form-label">Regular Price</label>
                                    <input type="number" name="regularPrice[]" class="form-control border" required>
                                </div>
                                <div class="mb-2">
                                    <label class="form-label">Quantity</label>
                                    <input type="number" name="quantity[]" class="form-control border" required>
                                </div>
                            </div>
                        </div>
                        <button type="button" onclick="addVariant()">Add More Variants</button>

                        <div class="card mb-2">
                            <div class="card-header">
                                <h4>Choose images</h4>
                            </div>
                            <div class="border row">
                                <div id="addedImagesContainer" class="thumbnails-container"></div>
                            </div>
                            <div class="row">
                                <div class="card-body align-items-center">
                                    <input class="form-control" type="file" name="images" id="inputImages" multiple accept="image/png, image/jpeg, image/jpg">
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>
                        </div>

                        <div>
                            <button class="btn btn-md rounded font-sm hover-up" type="button" onclick="validateAndSubmit(event)">Publish</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    async function fetchBrandsAndCategories() {
        let brandRes = await fetch("/admin/fetchbrands");
        let categoryRes = await fetch("/admin/fetchcategories");

        let brands = await brandRes.json();
        let categories = await categoryRes.json();

        let brandSelect = document.getElementById("brand");
        brands.forEach(brand => {
            let option = document.createElement("option");
            option.value = brand._id;
            option.textContent = brand.name;
            brandSelect.appendChild(option);
        });

        let categorySelect = document.getElementById("categoryId");
        categories.forEach(category => {
            let option = document.createElement("option");
            option.value = category._id;
            option.textContent = category.name;
            categorySelect.appendChild(option);
        });
    }

    fetchBrandsAndCategories();

    function addVariant() {
        let container = document.getElementById("variantsContainer");
        let div = document.createElement("div");
        div.classList.add("variant");

        div.innerHTML = `
            <div class="mb-2">
                <label class="form-label">Size</label>
                <input type="text" name="size[]" class="form-control border" required>
            </div>
            <div class="mb-2">
                <label class="form-label">Regular Price</label>
                <input type="number" name="regularPrice[]" class="form-control border" required>
            </div>
            <div class="mb-2">
                <label class="form-label">Quantity</label>
                <input type="number" name="quantity[]" class="form-control border" required>
            </div>
        `;
        container.appendChild(div);
    }

    // async function validateAndSubmit(event) {
    //     event.preventDefault();

    //     const form = document.getElementById("productForm");
    //     const formData = new FormData(form);

    //     // Get variants dynamically
    //     const variants = [];
    //     document.querySelectorAll("#variantsContainer .variant").forEach((variantDiv, index) => {
    //         const size = variantDiv.querySelector(`input[name='size[]']`).value;
    //         const regularPrice = variantDiv.querySelector(`input[name='regularPrice[]']`).value;
    //         const quantity = variantDiv.querySelector(`input[name='quantity[]']`).value;

    //         if (size && regularPrice && quantity) {
    //             variants.push({
    //                 size: size,
    //                 regularPrice: parseFloat(regularPrice),
    //                 quantity: parseInt(quantity),
    //             });
    //         }
    //     });

    //     const productData = {
    //         productName: formData.get("productName"),
    //         description: formData.get("description"),
    //         categoryId: formData.get("categoryId"),
    //         brand: formData.get("brand"),
    //         offer: parseFloat(formData.get("offer")) || 0,
    //         isActive: true,
    //         images: [],
    //         variants: variants,
    //     };

    //     // Handle images
    //     const imageFiles = document.getElementById("inputImages").files;
    //     const imagePromises = [...imageFiles].map(file => convertImageToBase64(file));
    //     productData.images = await Promise.all(imagePromises);

    //     try {
    //         let response = await fetch("/admin/addproducts", {
    //             method: "POST",
    //             headers: { "Content-Type": "application/json" },
    //             body: JSON.stringify(productData),
    //         });

    //         let data = await response.json();

    //         if (data.success) {
    //             alert("Product added successfully!");
    //             window.location.href = "/admin/products";
    //         } else {
    //             alert("Error adding product: " + data.message);
    //         }
    //     } catch (error) {
    //         console.error("Error:", error);
    //     }
    // }
    async function validateAndSubmit(event) {
    event.preventDefault();

    const form = document.getElementById("productForm");
    const formData = new FormData(form);
    console.log(formData)

    // Get variants dynamically
    const variants = [];
    document.querySelectorAll("#variantsContainer .variant").forEach(variantDiv => {
        const size = variantDiv.querySelector("input[name='size[]']").value;
        const regularPrice = variantDiv.querySelector("input[name='regularPrice[]']").value;
        const quantity = variantDiv.querySelector("input[name='quantity[]']").value;

        if (size && regularPrice && quantity) {
            variants.push({
                size: size,
                regularPrice: parseFloat(regularPrice),
                quantity: parseInt(quantity),
            });
        }
    });

    formData.append("variants", JSON.stringify(variants)); // Convert variants to JSON

    try {
        let response = await fetch("/admin/addproducts", {
            method: "POST",
            body: formData, // Send FormData instead of JSON
        });

        let data = await response.json();
        // console.log(data.brands)

        if (data.success) {
            alert("Product added successfully!");
            window.location.href = "/admin/products";
        } else {
            alert("Error adding product: " + data.message);
        }
    } catch (error) {
        console.error("Error:", error);
    }
}


    function convertImageToBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
            reader.readAsDataURL(file);
        });
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<%- include("partials/footer") %>



