<%- include("partials/header") %>

<head>
    <script src="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>   -->
</head>

 
 <style>
  .modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(8px);
    animation: fadeIn 0.4s ease-out;
}

.modal-content {
    background-color: #ffffff;
    margin: 5% auto;
    padding: 30px;
    border-radius: 15px;
    width: 90%;
    max-width: 800px; /* Increased max-width */
    max-height: 80vh; /* Limit height to viewport */
    overflow-y: auto; /* Allow scrolling if content is too long */
    box-shadow: 0 20px 60px rgba(0,0,0,0.2);
    position: relative;
    border: 1px solid rgba(0,0,0,0.05);
    transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
}

#cropperImage {
    max-width: 100%;
    max-height: 60vh; /* Limit image height */
    object-fit: contain;
    display: block;
    margin: 0 auto;
    border-radius: 12px;
    box-shadow: 0 15px 40px rgba(0,0,0,0.15);
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .modal-content {
        width: 95%;
        margin: 10% auto;
        padding: 20px;
    }
    
    #cropperImage {
        max-height: 50vh;
    }
}
 </style>
 
 <section class="content-main">
     <div class="row">
         <div class="col-9">
             <div class="content-header">
                 <h2 class="content-title">Add New Product</h2>
             </div>
         </div>
         <div class="col-lg-6">
             <div class="card mb-4">
                 <div class="card-body">
                     <form id="productForm">
                         <div class="mb-4">
                             <label class="form-label">Product Name</label>
                             <input type="text" id="productName" name="name" class="form-control border" required>
                             <p id="productNameError" class="text-red-500 text-sm mt-1 hidden" style="color: red;"></p>
                         </div>
                         <div class="mb-4">
                             <label class="form-label">Brand</label>
                             <select class="form-select border" name="brand" id="brand"></select>
                         </div>
                         <div class="mb-4">
                             <label class="form-label">Category</label>
                             <select class="form-select border" name="categoryId" id="categoryId"></select>
                         </div>
                         <div class="mb-4">
                             <label class="form-label">Full description</label>
                             <textarea name="description" class="form-control border" rows="4" required></textarea>
                         </div>
                         <h4>Product Variants</h4>
                         <div id="variantsContainer">
                             <div class="variant">
                                 <div class="mb-2">
                                     <label class="form-label">Size</label>
                                     <input type="text" name="size[]" class="form-control border" required>
                                     <p id="sizeError" class="text-red-500 text-sm mt-1 hidden" style="color: red;"></p>
                                 </div>
                                 <div class="mb-2">
                                     <label class="form-label">Regular Price</label>
                                     <input type="number" name="regularPrice[]" class="form-control border" required>
                                     <p id="regularPriceError" class="text-red-500 text-sm mt-1 hidden" style="color: red;"></p>
                                 </div>
                                 <div class="mb-2">
                                     <label class="form-label">Offer (%)</label>
                                     <input type="number" name="offer[]" class="form-control border" min="0" max="100">
                                     <p id="offerError" class="text-red-500 text-sm mt-1 hidden"  style="color: red;"></p>
                                 </div>
                                 <div class="mb-2">
                                     <label class="form-label">Quantity</label>
                                     <input type="number" name="quantity[]" class="form-control border" required>
                                     <p id="quantityError" class="text-red-500 text-sm mt-1 hidden " style="color: red;"></p>
                                 </div>
                             </div>
                         </div>
                         <button type="button" onclick="addVariant()">Add More Variants</button>
                         <div class="card mb-2">
                             <div class="card-header">
                                 <h4>Choose and Crop Images</h4>
                             </div>
                             <div class="border row">
                                 <div id="addedImagesContainer" class="thumbnails-container"></div>
                             </div>
                             <div class="row">
                                 <div class="card-body align-items-center">
                                     <input class="form-control" type="file" name="images" id="inputImages" multiple accept="image/png, image/jpeg, image/jpg">
                                 </div>
                             </div>
                         </div>
                         <div>
                             <button id="publishButton" class="btn btn-md rounded font-sm hover-up" type="button">Publish</button>
                         </div>
                     </form>
                 </div>
             </div>
         </div>
     </div>
 </section>
 
 <!-- Cropper Modal -->
 <!-- Cropper Modal -->
<div id="cropperModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h4>Crop Your Image</h4>
            <span class="close">&times;</span>
        </div>
        <div>
            <img id="cropperImage" style="max-width: 100%; display: block;">
        </div>
        <button id="cropAndSave">Crop & Save</button>
    </div>
</div>


<script>

function openCropperModal() {
    cropperModal.style.display = "block";
    cropperModal.classList.add("show");
    document.body.classList.add("modal-open");
}
function addVariant() {
        let container = document.getElementById("variantsContainer");
        let div = document.createElement("div");
        div.classList.add("variant");
        div.innerHTML = `
            <div class="mb-2">
                <label class="form-label">Size</label>
                <input type="text" name="size[]" class="form-control border" required>
                <p id="sizeError" class="text-red-500 text-sm mt-1 hidden"></p>
            </div>
            <div class="mb-2">
                <label class="form-label">Regular Price</label>
                <input type="number" name="regularPrice[]" class="form-control border" required>
                <p id="regularPriceError" class="text-red-500 text-sm mt-1 hidden"></p>
            </div>
            <div class="mb-2">
                <label class="form-label">Offer (%)</label>
                <input type="number" name="offer[]" class="form-control border" min="0" max="100">
                <p id="offerError" class="text-red-500 text-sm mt-1 hidden"></p>
            </div>
            <div class="mb-2">
                <label class="form-label">Quantity</label>
                <input type="number" name="quantity[]" class="form-control border" required>
                <p id="quantityError" class="text-red-500 text-sm mt-1 hidden"></p>
            </div>
        `;
        container.appendChild(div);
    }
    document.addEventListener("DOMContentLoaded", function() {
    // Detailed library check
    console.log("Cropper object:", Cropper);
    console.log("Cropper keys:", Object.keys(Cropper));

    // Alternative constructor approach
    const CropperConstructor = Cropper.default || Cropper;
    
    console.log("Constructor type:", typeof CropperConstructor);

    let cropper;
    let selectedFiles = []; 
    let croppedImages = []; 
    const inputImages = document.getElementById("inputImages");
    const cropperModal = document.getElementById("cropperModal");
    const cropperImage = document.getElementById("cropperImage");
    const cropAndSaveBtn = document.getElementById("cropAndSave");
    const closeBtn = document.querySelector(".close");

    let currentFileIndex = 0;

    // Fallback constructor initialization
    function initializeCropper(image, options) {
        try {
            // Try multiple initialization methods
            if (typeof Cropper === 'function') {
                return new Cropper(image, options);
            } else if (typeof CropperConstructor === 'function') {
                return new CropperConstructor(image, options);
            } else if (Cropper && Cropper.prototype && Cropper.prototype.constructor) {
                return Cropper.prototype.constructor(image, options);
            } else {
                throw new Error('Cannot find valid Cropper constructor');
            }
        } catch (error) {
            console.error('Cropper initialization error:', error);
            alert('Failed to initialize image cropper. Please check browser console.');
            return null;
        }
    }

    // When selecting new files
    inputImages.addEventListener("change", function(event) {
        try {
            console.log(`Files selected: ${event.target.files.length}`);
            
            selectedFiles = Array.from(event.target.files);
            croppedImages = [];
            currentFileIndex = 0;
            
            document.getElementById("addedImagesContainer").innerHTML = "";
            
            if (selectedFiles.length > 0) {
                openCropperForNextImage();
            }
        } catch (error) {
            console.error(`File selection error: ${error.message}`);
        }
    });

    function openCropperForNextImage() {
        try {
            console.log(`Attempting to open cropper for image index: ${currentFileIndex}`);
            
            if (currentFileIndex < selectedFiles.length) {
                const file = selectedFiles[currentFileIndex];
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    try {
                        console.log("File read successfully");
                        
                        // Ensure image is fully loaded before initializing Cropper
                        cropperImage.onload = function() {
                            try {
                                // Destroy previous cropper instance if it exists
                                if (cropper) {
                                    cropper.destroy();
                                }
                                
                                console.log(`Image dimensions: ${cropperImage.naturalWidth} x ${cropperImage.naturalHeight}`);
                                
                                // Use fallback constructor method
                                cropper = initializeCropper(cropperImage, {
                                    aspectRatio: 1,
                                    viewMode: 1,
                                    autoCropArea: 1,
                                    movable: false,
                                    zoomable: false,
                                    rotatable: true,
                                    scalable: true,
                                    ready: function() {
                                        console.log("Cropper initialized successfully");
                                        cropperModal.style.display = "block";
                                    }
                                });
                            } catch (cropperError) {
                                console.error(`Cropper initialization error: ${cropperError.message}`);
                            }
                        };
                        
                        // Set image source
                        cropperImage.src = e.target.result;
                    } catch (readError) {
                        console.error(`Image processing error: ${readError.message}`);
                    }
                };
                
                reader.onerror = function(error) {
                    console.error(`File reading error: ${error.message}`);
                };
                
                reader.readAsDataURL(file);
            } else {
                console.log("All images processed");
                cropperModal.style.display = "none";
                updateFileInput();
            }
        } catch (error) {
            console.error(`General cropper error: ${error.message}`);
        }
    }
    cropAndSaveBtn.addEventListener("click", function() {
        if (!cropper) return;
        console.log("heii")
        cropper.getCroppedCanvas().toBlob((blob) => {
            // Create a truly unique filename with timestamp and random string
            const fileExtension = selectedFiles[currentFileIndex].name.split('.').pop();
            const uniqueName = `img_${Date.now()}_${Math.random().toString(36).substring(2)}.${fileExtension}`;
            
            // Create a new File object with the unique name
            const file = new File([blob], uniqueName, { type: "image/jpeg" });
            croppedImages.push(file);

            // Create and show thumbnail
            const imagePreviewContainer = document.createElement("div");
            imagePreviewContainer.classList.add("thumbnail");

            const imagePreview = document.createElement("img");
            imagePreview.src = URL.createObjectURL(blob);
            imagePreview.style.width = "100px";
            imagePreview.style.height = "100px";

            // Delete button
            const deleteBtn = document.createElement("button");
            deleteBtn.innerText = "X";
            deleteBtn.classList.add("delete-btn");
            deleteBtn.onclick = function() {
                const index = croppedImages.indexOf(file);
                if (index > -1) {
                    croppedImages.splice(index, 1);
                }
                imagePreviewContainer.remove();
                updateFileInput();
            };

            imagePreviewContainer.appendChild(imagePreview);
            imagePreviewContainer.appendChild(deleteBtn);
            document.getElementById("addedImagesContainer").appendChild(imagePreviewContainer);

            // Move to next image
            currentFileIndex++;
            cropperModal.style.display = "none";
            openCropperForNextImage();
        }, "image/jpeg", 0.9); // Added quality parameter
    });

    function updateFileInput() {
        try {
            // Create a new DataTransfer object
            const dataTransfer = new DataTransfer();
            
            // Add each cropped image to the DataTransfer object
            croppedImages.forEach(file => {
                dataTransfer.items.add(file);
            });
            
            // Replace the input's files with our processed files
            inputImages.files = dataTransfer.files;
        } catch (error) {
            console.error("Error updating file input:", error);
            // Fallback for browsers that don't support DataTransfer
            console.log("Cropped images will still be submitted via FormData");
        }
    }

    closeBtn.addEventListener("click", function() {
        // Ask if they want to skip the current image
        if (currentFileIndex < selectedFiles.length) {
            Swal.fire({
                title: 'Skip this image?',
                text: 'Do you want to skip cropping this image?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, skip it',
                cancelButtonText: 'No, go back to cropping'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Skip current image and move to next
                    currentFileIndex++;
                    cropperModal.style.display = "none";
                    openCropperForNextImage();
                }
                // If not confirmed, modal stays open
            });
        } else {
            cropperModal.style.display = "none";
        }
    });

    // Fetch brands and categories (keep your existing function)
    async function fetchBrandsAndCategories() {
        let brandRes = await fetch("/admin/fetchbrands");
        let categoryRes = await fetch("/admin/fetchcategories");

        let brands = await brandRes.json();
        let categories = await categoryRes.json();

        let brandSelect = document.getElementById("brand");
        brands.forEach(brand => {
            let option = document.createElement("option");
            option.value = brand._id;
            option.textContent = brand.name;
            brandSelect.appendChild(option);
        });

        let categorySelect = document.getElementById("categoryId");
        categories.forEach(category => {
            let option = document.createElement("option");
            option.value = category._id;
            option.textContent = category.name;
            categorySelect.appendChild(option);
        });
    }

    fetchBrandsAndCategories();

    // Modified submit function with improved file handling
    async function validateAndSubmit(event) {
        if (event) event.preventDefault();

        // Validate if images are selected
        if (croppedImages.length === 0) {
            Swal.fire({
                title: "Warning!",
                text: "Please select and crop at least one image.",
                icon: "warning",
                confirmButtonText: "OK"
            });
            return;
        }

        const form = document.getElementById("productForm");
        const formData = new FormData(form);

        // Clear any existing image files from the formData to prevent duplicates
        formData.delete('images');
        
        // Add each cropped image individually
        croppedImages.forEach((file, index) => {
            formData.append('images', file);
        });

        // Get variants dynamically
     // Get variants dynamically
const variants = [];
document.querySelectorAll("#variantsContainer .variant").forEach(variantDiv => {
    const size = variantDiv.querySelector("input[name='size[]']").value;
    const regularPrice = variantDiv.querySelector("input[name='regularPrice[]']").value;
    const quantity = variantDiv.querySelector("input[name='quantity[]']").value;
    const offer = variantDiv.querySelector("input[name='offer[]']").value;
    const productName = document.getElementById("productName").value;

    // Select error elements within this specific variant
    const sizeError = variantDiv.querySelector("#sizeError");
    const regularPriceError = variantDiv.querySelector("#regularPriceError");
    const quantityError = variantDiv.querySelector("#quantityError");
    const offerError = variantDiv.querySelector("#offerError");
    const productNameError = document.getElementById("productNameError");

    // Reset error messages
    sizeError.textContent = "";
    regularPriceError.textContent = "";
    quantityError.textContent = "";
    offerError.textContent = "";
    productNameError.textContent = "";

    sizeError.classList.add("hidden");
    regularPriceError.classList.add("hidden");
    quantityError.classList.add("hidden");
    offerError.classList.add("hidden");
    productNameError.classList.add("hidden");
    
    let isValid = true;

    // Continue with your validation logic...

            if(!productName.trim()){
                productNameError.textContent="Product name required"
                productNameError.classList.remove("hidden");
                isValid=false;
            }

            
            sizeRegex=/^(?!value$)(?:[1-9]\d?|\d)(?:\.\d{1,2})?$/

            if(!size.trim()){
                sizeError.textContent = "size required!";
                sizeError.classList.remove("hidden");
                isValid = false;
            }else if(!sizeRegex.test(size)){
                sizeError.textContent = "Enter a valid size!";
                sizeError.classList.remove("hidden");
                isValid = false;
            }


            regularPriceRegex=/^(?!value$)(?!-)(?:\d{1,7})(?:\.\d{1,2})?$/
            if(!regularPrice.trim()){
                regularPriceError.textContent = "Regular price required!";
                regularPriceError.classList.remove("hidden");
                isValid = false;
            }else if(!regularPriceRegex.test(regularPrice)){
                regularPriceError.textContent = "Enter valid price";
                regularPriceError.classList.remove("hidden");
                isValid = false;
            }


            quantityRegex=/^(?!0)\d{1,7}$/
            if(!quantity.trim()){
                    quantityError.textContent = "Quantity required!";
                    quantityError.classList.remove("hidden");
                isValid = false;
            }else if(!quantityRegex.test(quantity)){
                quantityError.textContent = "Enter a valid quality!";
                    quantityError.classList.remove("hidden");
                isValid = false;
            }

            offerRegex=/^(100|[1-9][0-9]?)$/
            if(!offer.trim()){
                offerError.textContent = "offer required!";
                offerError.classList.remove("hidden");
                isValid = false;
            }else if(!offerRegex.test(offer)){
                offerError.textContent = "Enter valid offer";
                offerError.classList.remove("hidden");
                isValid = false;
            }


            if (size && regularPrice && quantity && offer) {
                variants.push({
                    size: size,
                    regularPrice: parseFloat(regularPrice),
                    quantity: parseInt(quantity),
                    offer: parseInt(offer)
                });
            }
        });

        formData.append("variants", JSON.stringify(variants));

        try {
            let response = await fetch("/admin/addproducts", {
                method: "POST",
                body: formData,
            });

            let data = await response.json();

            if (data.success) {
                Swal.fire({
                    title: "Success!",
                    text: "Product added successfully!",
                    icon: "success",
                    confirmButtonText: "OK"
                }).then(() => {
                    window.location.href = "/admin/products";
                });
            } else {
                Swal.fire({
                    title: "Error!",
                    text: "Error adding product: " + data.message,
                    icon: "error",
                    confirmButtonText: "OK"
                });
            }
        } catch (error) {
            console.error("Error:", error);
            Swal.fire({
                title: "Error!",
                text: "Something went wrong. Please try again.",
                icon: "error",
                confirmButtonText: "OK"
            });
        }
    }

    document.getElementById("publishButton").addEventListener("click", validateAndSubmit);
    
});





    //for cropper 
    
</script>



<%- include("partials/footer") %>



