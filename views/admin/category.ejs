<%- include("partials/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>  
<body>
  <section class="content-main">
    <div class="content-header d-flex justify-content-between align-items-center">
      <div>
        <h2 class="content-title card-title">Category</h2>
      </div>
      <div class="d-flex gap-3 align-items-center">
        <!-- Search Bar with Reset Icon -->
        <div class="input-group">
          <input type="text" class="form-control" placeholder="Search categories..." id="searchInput">
          <button class="btn btn-outline-secondary" type="button" id="searchBtn">
            <i class="bi bi-search"></i>
          </button>
          <button class="btn btn-outline-secondary" type="button" id="resetBtn">
            <i class="bi bi-arrow-clockwise"></i>
          </button>
        </div>
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addCategoryModal">Add Category</button>
      </div>
    </div>
    
    <div class="card">
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover" id="categoriesTable">
            <thead>
              <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Status</th>
                <th class="text-start">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% categories.forEach(category => { %>
              <tr>
                <td class="text-start"><%= category.name %></td>
                <td class="text-start">
                  <% 
                    const maxLength = 50;
                    let fullDesc = category.description;
                    let truncated = fullDesc.length > maxLength ? fullDesc.substring(0, maxLength) + "..." : fullDesc;
                  %>
                  <span class="category-desc" data-full="<%= fullDesc %>">
                    <%= truncated %>
                  </span>
                  <% if (fullDesc.length > maxLength) { %>
                  <a href="javascript:void(0);" class="read-more-link">read more</a>
                  <% } %>
                </td>
                <td>
                  <!-- <button class="btn toggle-status-btn <%= category.status === 'listed' ? 'btn-success' : 'btn-danger' %>" 
                          data-id="<%= category._id %>">
                    <%= category.status === 'listed' ? 'Listed' : 'Unlisted' %>
                  </button> -->
                  <button class="btn toggle-status-btn <%= category.isListed ? 'btn-success' : 'btn-danger' %>" 
                    data-id="<%= category._id %>">
              <%= category.isListed ? 'Listed' : 'Unlisted' %>
            </button>
            
            
                </td>
                <td class="text-start">
                  <div class="d-flex gap-2">
                    <button class="btn btn-info text-white edit-category-btn" 
                            data-bs-toggle="modal" 
                            data-bs-target="#editCategoryModal"
                            data-id="<%= category._id %>"
                            data-name="<%= category.name %>"
                            data-description="<%= category.description %>">
                      Edit
                    </button>
                    <button class="btn btn-danger delete-category-btn" data-id="<%= category._id %>">
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </section>

  <!-- Add Category Modal -->
  <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addCategoryModalLabel">Add to Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addCategoryForm">
            <div class="mb-3">
              <label for="addCategoryName" class="form-label">Name</label>
              <input type="text" class="form-control" id="addCategoryName" name="name" />
            </div>
            <div class="mb-3">
              <label for="addCategoryDescription" class="form-label">Description</label>
              <textarea class="form-control" id="addCategoryDescription" name="description"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Add Category</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Category Modal -->
  <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editCategoryForm">
            <input type="hidden" id="editCategoryId" name="id"/>
            <div class="mb-3">
              <label for="editCategoryName" class="form-label">Name</label>
              <input type="text" class="form-control" id="editCategoryName" name="name"/>
              <p id="editcategoryNameError" class="text-red-500 text-sm mt-1 hidden"></p>

            </div>
            <div class="mb-3">
              <label for="editCategoryDescription" class="form-label">Description</label>
              <p id="editCategoryDescriptionError" class="text-red-500 text-sm mt-1 hidden"></p>
              <textarea class="form-control" id="editCategoryDescription" name="description" ></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Pagination -->
  <nav>
    <ul class="pagination justify-content-center">
      <% if (currentPage > 1) { %>
        <li class="page-item">
          <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
        </li>
      <% } %>
  
      <% for (let i = 1; i <= totalPages; i++) { %>
        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
          <a class="page-link" href="?page=<%= i %>"><%= i %></a>
        </li>
      <% } %>
  
      <% if (currentPage < totalPages) { %>
        <li class="page-item">
          <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
        </li>
      <% } %>
    </ul>
  </nav>
  
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <!-- Toastify JS -->
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    document.addEventListener("DOMContentLoaded", function() {
      // Add Category Form Submission
      document.getElementById("addCategoryForm").addEventListener("submit", async function(e) {
        e.preventDefault();
        const categoryName = document.getElementById("addCategoryName").value;
        const categoryDescription = document.getElementById("addCategoryDescription").value;

        const formData = {
            name: categoryName,
            description: categoryDescription
        };
        
        try {
          const response = await fetch("/admin/add-category", {
            method: "POST",
            headers: {"Content-type": "application/json"},
            body: JSON.stringify(formData)
          });

          const data = await response.json();
          if (data.success) {
              Toastify({
                  text: "Category added successfully!",
                  duration: 3000,
                  close: true,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "#28a745",
              }).showToast();

              setTimeout(() => {
                  location.reload();
              }, 1500);
          } else {
              Toastify({
                  text: data.message || "Something went wrong!",
                  duration: 3000,
                  close: true,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "#dc3545",
              }).showToast();
          }
        } catch (error) {
          console.error("Error:", error);
          Toastify({
              text: "An error occurred. Please try again.",
              duration: 3000,
              close: true,
              gravity: "top",
              position: "right",
              backgroundColor: "#dc3545",
          }).showToast();
        }
      });
    //   console.log(dataset)
      // Edit Category Modal population
      document.querySelectorAll(".edit-category-btn").forEach(button => {
        button.addEventListener("click", function() {
          const categoryId = this.dataset.id;
          const categoryName = this.dataset.name;
          const categoryDescription = this.dataset.description;
          document.getElementById("editCategoryId").value = categoryId;
          document.getElementById("editCategoryName").value = categoryName;
          document.getElementById("editCategoryDescription").value = categoryDescription;
        });
      });

      document.querySelectorAll(".delete-category-btn").forEach(button => {
        button.addEventListener("click",async function (e) {
            const categoryId=this.dataset.id
            console.log("this is category id form dataset");
            const response=await fetch(`/admin/delete-category/${categoryId}`,{
                method:"POSt",
                headers:{"Content-type":"application/json"},
            })
            
            
        })
      });
      // Delete category button
    //   document.querySelectorAll(".delete-category-btn").forEach(button => {
    //     button.addEventListener("click", function() {
    //       const categoryId = this.dataset.id;
    //       console.log(categoryId)
    //       Swal.fire({
    //         title: "Are you sure?",
    //         text: `this is ${categoryId}`,
    //         icon: "warning",
    //         showCancelButton: true,
    //         confirmButtonColor: "#d33",
    //         cancelButtonColor: "#3085d6",
    //         confirmButtonText: "Yes, delete it!"
    //       }).then((result) => {
    //         if (result.isConfirmed) {
    //           fetch(`/admin/delete-category/${categoryId}`, { method: "DELETE" })
    //             .then(response => response.json())
    //             .then(() => {
    //               Swal.fire("Deleted!", "Category has been deleted.", "success")
    //                 .then(() => location.reload());
    //             })
    //             .catch(() => {
    //               Swal.fire("Error", "Failed to delete category", "error");
    //             });
    //         }
    //       });
    //     });
    //   });

      // Edit Category Form Submission
      document.getElementById("editCategoryForm").addEventListener("submit", async function(e) {
        e.preventDefault();
        const categoryId = document.getElementById("editCategoryId").value;
        const editedCategoryName = document.getElementById("editCategoryName").value;
        const editedCategoryDesc = document.getElementById("editCategoryDescription").value;
    //     const editCategoryNameError = document.getElementById("editCategoryNameError");
    //     const editCategoryDescriptionError = document.getElementById("editCategoryDescriptionError");
        
    //     editCategoryNameError.textContent= "";
    //     editCategoryDescriptionError.textContent = "";

    //     editCategoryNameError.classList.add("hidden");
    //     editCategoryDescriptionError.classList.add("hidden");
    //     if (!editedCategoryName || !editedCategoryDesc) {
    //     fullnameError.textContent = "Full Name is required!";
    //     fullnameError.classList.remove("hidden");
    //     isValid = false;
    // }
    //     let isValid = true;
        

        console.log(editedCategoryDesc)

        const formData = {
          editedCategoryName,
          editedCategoryDesc
        };
        console.log(formData)

        try {
          const response= await fetch(`/admin/edit-category/${categoryId}`, {
            method: "PUT",
            headers: {"Content-type": "application/json"},
            body: JSON.stringify(formData)
          });

          const data=await response.json();
          
          console.log(data.message)
          
            if (data.success) {
              Toastify({
                  text: data.message,
                  duration: 3000,
                  close: true,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "#28a745",
              }).showToast();

              setTimeout(() => {
                  location.reload();
              }, 1500);
          } else {
              Toastify({
                  text: data.message || "Something went wrong!",
                  duration: 3000,
                  close: true,
                  gravity: "top",
                  position: "right",
                  backgroundColor: "#dc3545",
              }).showToast();
          }
          
        } catch (error) {
          console.error("Error:", error);
        }
      });

      // Read More functionality for long descriptions
      document.querySelectorAll(".read-more-link").forEach(link => {
        link.addEventListener("click", function() {
          const fullDescription = this.previousElementSibling.getAttribute("data-full");
          Swal.fire({
            title: "Full Description",
            html: `<p style="text-align: left;">${fullDescription}</p>`,
            icon: "info",
            confirmButtonText: "Close"
          });
        });
      });

      // Search functionality for categories
      const searchInput = document.getElementById("searchInput");
      const searchBtn = document.getElementById("searchBtn");
      const resetBtn = document.getElementById("resetBtn");
      const tableRows = document.querySelectorAll("#categoriesTable tbody tr");

      searchBtn.addEventListener("click", function() {
        const query = searchInput.value.toLowerCase().trim();
        tableRows.forEach(row => {
          const nameCell = row.querySelector("td:first-child").textContent.toLowerCase();
          row.style.display = nameCell.includes(query) ? "" : "none";
        });
      });

      // Reset search
      resetBtn.addEventListener("click", function() {
        searchInput.value = "";
        tableRows.forEach(row => row.style.display = "");
      });
    });
    
    document.querySelectorAll(".toggle-status-btn").forEach(button => {
      button.addEventListener("click", async function () {
        const categoryId = this.dataset.id;
        const buttonElement = this;

        try {
          const response = await fetch(`/admin/toggle-category-status/${categoryId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" }
          });

          const data = await response.json();
          console.log(data)

          if (data.success) {
            // Update button text and class based on the new status
            if (data.newStatus) {
              buttonElement.textContent = "Listed";
              buttonElement.classList.remove("btn-danger");
              buttonElement.classList.add("btn-success");
    
            } else {
              buttonElement.textContent = "Unlisted";
              buttonElement.classList.remove("btn-success");
              buttonElement.classList.add("btn-danger");
            }
          } else {
            Swal.fire("Error", data.message || "Failed to update status", "error");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error", "Something went wrong!", "error");
        }
      });
    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
<%- include("partials/footer") %>
