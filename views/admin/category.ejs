<%- include("partials/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    /* UI Enhancement: Image thumbnail styling */
    .category-thumbnail {
      width: 50px;
      height: 50px;
      object-fit: cover;
      border-radius: 4px;
    }
    .img-preview {
      margin-top: 10px;
      max-width: 100%;
      max-height: 200px;
    }
  </style>
</head>  
<body>
  <section class="content-main">
    <div class="content-header d-flex justify-content-between align-items-center">
      <div>
        <h2 class="content-title card-title">Category</h2>
      </div>
      <div class="d-flex gap-3 align-items-center">
        <form action="/admin/category" method="GET" id="search-form">
          <div class="input-group">
            <input type="text" name="search" class="form-control" placeholder="Search categories..." id="searchInput" value="<%= search %>">
            <button class="btn btn-outline-secondary" type="submit" id="searchBtn">
              <i class="bi bi-search"></i>
            </button>
            <button class="btn btn-outline-secondary" type="button" id="resetBtn">
              <i class="bi bi-arrow-clockwise"></i>
            </button>
          </div>
        </form>
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addCategoryModal">Add Category</button>
      </div>
    </div>
    
    <div class="card">
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover" id="categoriesTable">
            <thead>
              <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Status</th>
                <th class="text-start">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% categories.forEach(category => { %>
                <tr>
                  <td>
                    <% if (category.image) { %>
                      <img src="<%= category.image %>" alt="Category Image" data-name="<%=category.name %>" class="category-thumbnail category-image-popup" />
                    <% } else { %>
                      <i class="bi bi-card-image" style="font-size: 1.5rem;"></i>
                    <% } %>
                  </td>
                  <td class="text-start"><%= category.name %></td>
                  <td class="text-start">
                    <% 
                      const maxLength = 50;
                      let fullDesc = category.description;
                      let truncated = fullDesc.length > maxLength ? fullDesc.substring(0, maxLength) + "..." : fullDesc;
                    %>
                    <span class="category-desc" data-full="<%= fullDesc %>">
                      <%= truncated %>
                    </span>
                    <% if (fullDesc.length > maxLength) { %>
                      <a href="javascript:void(0);" class="read-more-link">read more</a>
                    <% } %>
                  </td>
                  <td>
                    <button class="btn toggle-status-btn <%= category.isListed ? 'btn-success' : 'btn-danger' %>" 
                      data-id="<%= category._id %>">
                      <%= category.isListed ? 'Listed' : 'Unlisted' %>
                    </button>
                  </td>
                  <td class="text-start">
                    <div class="d-flex gap-2">
                      <button class="btn btn-info text-white edit-category-btn" 
                              data-bs-toggle="modal" 
                              data-bs-target="#editCategoryModal"
                              data-id="<%= category._id %>"
                              data-name="<%= category.name %>"
                              data-description="<%= category.description %>"
                              data-image="<%= category.image ? category.image : 'default-image-path.jpg' %>">
                        Edit
                      </button>
                    </div>
                  </td>
                </tr>
              <% }) %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
    
    <!-- Pagination -->
    <nav>
      <ul class="pagination justify-content-center">
        <% if (currentPage > 1) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentPage - 1 %>&search=<%= search %>">Previous</a>
          </li>
        <% } %>
        <% for (let i = 1; i <= totalPages; i++) { %>
          <li class="page-item <%= i === currentPage ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>&search=<%= search %>"><%= i %></a>
          </li>
        <% } %>
        <% if (currentPage < totalPages) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentPage + 1 %>&search=<%= search %>">Next</a>
          </li>
        <% } %>
      </ul>
    </nav>
  </section>

  <!-- Add Category Modal -->
  <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addCategoryModalLabel">Add to Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addCategoryForm" enctype="multipart/form-data">
            <div class="mb-3">
              <label for="addCategoryName" class="form-label">Name</label>
              <input type="text" class="form-control" id="addCategoryName" name="name" />
            </div>
            <div class="mb-3">
              <label for="addCategoryDescription" class="form-label">Description</label>
              <textarea class="form-control" id="addCategoryDescription" name="description" ></textarea>
            </div>
            <div class="mb-3">
              <label for="addCategoryImage" class="form-label">Category Image</label>
              <input type="file" class="form-control" id="addCategoryImage" name="image" accept="image/png, image/jpeg, image/jpg" />
              <img id="imgPreview" class="img-preview" src="#" alt="Image Preview" style="display:none;"/>
            </div>
            <button type="submit" class="btn btn-primary">Add Category</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Category Modal -->
  <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editCategoryForm"  enctype="multipart/form-data">
            <input type="hidden" id="editCategoryId" name="id"/>
            <div class="mb-3">
              <label for="editCategoryName" class="form-label">Name</label>
              <input type="text" class="form-control" id="editCategoryName" name="name" />
            </div>
            <div class="mb-3">
              <label for="editCategoryDescription" class="form-label">Description</label>
              <textarea class="form-control" id="editCategoryDescription" name="description"></textarea>
            </div>
            <div class="mb-3">
              <label for="editCategoryImage" class="form-label">Category Image</label>
              <input type="file" class="form-control" id="addCategoryImage" name="image" accept="image/png, image/jpeg, image/jpg" />
              <div class="mt-2">
                <img id="editImgPreview" src="" alt="category Image" class="category-thumbnail" style="max-width: 100px; display: none;">
              </div>
            </div>
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Toastify & Bootstrap Scripts -->
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    document.addEventListener("DOMContentLoaded", function() {



      document.getElementById("addCategoryImage").addEventListener("change", function() {
  const file = this.files[0];
  const FILE_SIZE_LIMIT = 5 * 1024 * 1024; // 5MB in bytes
  const imgPreview = document.getElementById("imgPreview");
  if (file) {
    if (file.size > FILE_SIZE_LIMIT) {
      Toastify({
        text: "File size exceeds 5MB. Please choose a smaller image.",
        duration: 3000,
        close: true,
        gravity: "top",
        position: "right",
        backgroundColor: "#dc3545"
      }).showToast();
      // Clear the file input and preview if size is too large
      this.value = "";
      imgPreview.style.display = "none";
      return;
    }
    // If file is valid, display preview
    const reader = new FileReader();
    reader.onload = function() {
      imgPreview.setAttribute("src", reader.result);
      imgPreview.style.display = "block";
    };
    reader.readAsDataURL(file);
  } else {
    imgPreview.style.display = "none";
  }
});


      
      // Search functionality for categories
      const searchForm = document.getElementById("search-form");
      searchForm.addEventListener("submit", function(e) {
        e.preventDefault();
        const formData = new FormData(searchForm);
        const queryParams = new URLSearchParams(formData);
        window.location.href = `/admin/category?${queryParams.toString()}`;
      });
      
      const resetBtn = document.getElementById("resetBtn");
      resetBtn.addEventListener("click", function() {
        document.getElementById("searchInput").value = "";
        window.location.href = "/admin/category";
      });
      
      // Preview uploaded image for Add Category
      const addCategoryImage = document.getElementById("addCategoryImage");
      const imgPreview = document.getElementById("imgPreview");
      addCategoryImage.addEventListener("change", function() {
        const file = this.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function() {
            imgPreview.setAttribute("src", reader.result);
            imgPreview.style.display = "block";
          };
          reader.readAsDataURL(file);
        } else {
          imgPreview.style.display = "none";
        }
      });
      
      // Add Category Form Submission with image upload
    document.getElementById("addCategoryForm").addEventListener("submit", async function (e) {
    e.preventDefault();
    const formData = new FormData(this);
    try {
        const response = await fetch("/admin/add-category", {
            method: "POST",
            body: formData
        });
        const data = await response.json();

        if (data.success) {
            Swal.fire("Success", "Category added successfully!", "success");
            setTimeout(() => location.reload(), 1500);
        } else {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message || "Something went wrong!",
            });
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire({
            icon: "error",
            title: "File too large!",
            text: "Please upload an image smaller than 5MB.",
        });
    }
});

      
      // Edit Category Modal population
      document.querySelectorAll(".edit-category-btn").forEach(button => {
        button.addEventListener("click", function() {
          const categoryId = this.dataset.id;
          const categoryName = this.dataset.name;
          const categoryDescription = this.dataset.description;
          const categoryImage=this.dataset.image
          console.log(categoryImage+"this is my imaege url")
          document.getElementById("editCategoryId").value = categoryId;
          document.getElementById("editCategoryName").value = categoryName;
          document.getElementById("editCategoryDescription").value = categoryDescription;
        });
      });
      
      // Edit Category Form Submission
      document.getElementById("editCategoryForm").addEventListener("submit", async function(e) {
        e.preventDefault();
        const formData = new FormData(this);
  
        const categoryId = document.getElementById("editCategoryId").value;
        console.log(categoryId)
        try {
          const response = await fetch(`/admin/edit-category/${categoryId}`, {
            method: "PUT",
            body: formData
          });
          const data = await response.json();
          
          if (data.success) {
            Toastify({
              text: data.message,
              duration: 3000,
              close: true,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745"
            }).showToast();
            setTimeout(() => location.reload(), 1500);
          } else {
            Toastify({
              text: data.message || "Something went wrong!",
              duration: 3000,
              close: true,
              gravity: "top",
              position: "right",
              backgroundColor: "#dc3545"
            }).showToast();
          }
        } catch (error) {
          console.error("Error:", error);
        }
      });
      
      // Read More functionality for long descriptions
      document.querySelectorAll(".read-more-link").forEach(link => {
        link.addEventListener("click", function() {
          const fullDescription = this.previousElementSibling.getAttribute("data-full");
          Swal.fire({
            title: "Full Description",
            html: `<p style="text-align: left;">${fullDescription}</p>`,
            icon: "info",
            confirmButtonText: "Close"
          });
        });
      });
      
      // Toggle category status
      document.querySelectorAll(".toggle-status-btn").forEach(button => {
      button.addEventListener("click", async function () {
      const categoryId = this.dataset.id;
      const currentStatus = this.textContent.trim();
      const newStatus = currentStatus === "Listed" ? "Unlisted" : "Listed";

      Swal.fire({
      title: `Are you sure?`,
      text: `Do you want to ${newStatus.toLowerCase()} this category?`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#28a745",
      cancelButtonColor: "#dc3545",
      confirmButtonText: `Yes, ${newStatus}`,
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          const response = await fetch(`/admin/toggle-category-status/${categoryId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" }
          });
          const data = await response.json();
          if (data.success) {
            this.textContent = data.newStatus ? "Listed" : "Unlisted";
            this.classList.toggle("btn-success");
            this.classList.toggle("btn-danger");
            Swal.fire("Success", `Category is now ${newStatus.toLowerCase()}.`, "success");
          } else {
            Swal.fire("Error", data.message || "Failed to update status", "error");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire("Error", "Something went wrong!", "error");
        }
      }
    });
  });
});   

document.querySelectorAll(".category-image-popup").forEach(image => {
    image.addEventListener("click", function() {
      const imageUrl = this.getAttribute("src");
      Swal.fire({
        title: `${this.dataset.name}`,
        imageUrl: imageUrl,
        imageAlt: "Category Image",
        showCloseButton: true,
        showConfirmButton: false,
      });
    });
  });

  
  //image preview

  document.getElementById("addCategoryImage").addEventListener("change", function() {
    const file = this.files[0];
    const imgPreview = document.getElementById("editImgPreview");
    if (file) {
      const reader = new FileReader();
      reader.onload = function() {
        imgPreview.src = reader.result;
        imgPreview.style.display = "block";
      };
      reader.readAsDataURL(file);
    }
  });



    });


    

  </script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
<%- include("partials/footer") %>
