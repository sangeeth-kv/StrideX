<%- include("partials/header") %>
<!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-4 md:p-6">
  <div class="max-w-7xl mx-auto">
    <!-- Header -->
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
      <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-4 md:mb-0">
        <span class="inline-block mr-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
        </span>
        Sales Report
      </h1>
      <div class="flex flex-wrap gap-2">
        <a href="#" id="createSalesReport" class="inline-flex items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg transition-colors duration-200 shadow-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
          </svg>
          Generate PDF
        </a>
        <a href="#" id="downloadExcelReport" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors duration-200 shadow-sm">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
          </svg>
          Download Excel
        </a>
      </div>
    </div>

    <!-- Filters Card -->
    <div class="bg-white rounded-xl shadow-md mb-6 overflow-hidden">
      <div class="p-5 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-800">Filter Options</h2>
      </div>
      <div class="p-5">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Time Period Filter -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Time Period</label>
            <select
              class="w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              onchange="location.href='/admin/sale-reports?day=' + this.value"
            >
              <% const filters = ["salesToday", "salesWeekly", "salesMonthly", "salesYearly"]; %>
              <% const currentFilter = selectedDay || "salesToday"; %>
              <% filters.forEach(filter => { %>
                <option value="<%= filter %>" <%= currentFilter === filter ? "selected" : "" %>>
                  <%= filter.replace("sales", "") %>
                </option>
              <% }) %>
            </select>
          </div>

          <!-- Custom Date Range -->
          <div class="sm:col-span-2 lg:col-span-1">
            <label class="block text-sm font-medium text-gray-700 mb-2">Custom Date Range</label>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-2">
              <input 
                type="date" 
                id="startDate" 
                value="<%= startDate %>"
                class="w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" 
                placeholder="Start Date"
              />
              <input 
                type="date" 
                id="endDate" 
                value="<%= endDate %>"
                class="w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" 
                placeholder="End Date"
              />
            </div>
            <button 
              class="mt-2 w-full inline-flex justify-center items-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg transition-colors duration-200 shadow-sm"
              onclick="filterByDate()"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
              </svg>
              Apply Filter
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-6">
      <!-- Total Orders Card -->
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-5 flex items-center">
          <div class="rounded-full bg-blue-100 p-3 mr-4 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
          </div>
          <div>
            <p class="text-sm text-gray-500 font-medium">Total Orders</p>
            <h3 class="text-xl md:text-2xl font-bold text-gray-800"><%= totalOrders %></h3>
          </div>
        </div>
      </div>

      <!-- Total Sales Card -->
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-5 flex items-center">
          <div class="rounded-full bg-green-100 p-3 mr-4 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <div>
            <p class="text-sm text-gray-500 font-medium">Total Sales</p>
            <h3 class="text-xl md:text-2xl font-bold text-gray-800">₹ <%= totalPaid.toFixed(2) %></h3>
          </div>
        </div>
      </div>

      <!-- Total Discount Card -->
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-5 flex items-center">
          <div class="rounded-full bg-purple-100 p-3 mr-4 flex-shrink-0">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v13m0-13V6a2 2 0 112 2h-2zm0 0V5.5A2.5 2.5 0 109.5 8H12zm-7 4h14M5 12a2 2 0 110-4h14a2 2 0 110 4M5 12v7a2 2 0 002 2h10a2 2 0 002-2v-7" />
            </svg>
          </div>
          <div>
            <p class="text-sm text-gray-500 font-medium">Total Discount for coupons</p>
            <h3 class="text-xl md:text-2xl font-bold text-gray-800">₹ 0.00</h3>
          </div>
        </div>
      </div>
    </div>

    <!-- Data Table -->
    <div class="bg-white rounded-xl shadow-md overflow-hidden mb-6">
      <div class="p-5 border-b border-gray-200">
        <h2 class="text-lg font-semibold text-gray-800">Sales Data</h2>
      </div>
      
      <div class="overflow-x-auto">
        <table id="salesTable" class="min-w-full border-collapse border border-gray-300">
          <thead class="bg-gray-100 border-b border-gray-300">
            <tr>
              <th class="px-4 py-2 border border-gray-300 text-left text-xs font-medium text-gray-600 uppercase">#</th>
              <th class="px-4 py-2 border border-gray-300 text-left text-xs font-medium text-gray-600 uppercase">Order ID</th>
              <th class="px-4 py-2 border border-gray-300 text-left text-xs font-medium text-gray-600 uppercase">Customer</th>
              <th class="px-4 py-2 border border-gray-300 text-left text-xs font-medium text-gray-600 uppercase">Product</th>
              <th class="px-4 py-2 border border-gray-300 text-left text-xs font-medium text-gray-600 uppercase">Date</th>
              <th class="px-4 py-2 border border-gray-300 text-left text-xs font-medium text-gray-600 uppercase">Payment</th>
              <th class="px-4 py-2 border border-gray-300 text-left text-xs font-medium text-gray-600 uppercase">Quantity</th>
              <th class="px-4 py-2 border border-gray-300 text-right text-xs font-medium text-gray-600 uppercase">Price</th>
              <th class="px-4 py-2 border border-gray-300 text-right text-xs font-medium text-gray-600 uppercase">Total</th>
            </tr>
          </thead>
          
          <tbody class="bg-white divide-y divide-gray-300">
            <% let grandTotal = 0; %> 
            <% for (let i = 0; i < data.length; i++) { %>
              <% let item = data[i]; %>
              <% grandTotal += item.totalSale; %>
              <tr class="hover:bg-gray-50 transition-colors duration-150">
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm text-gray-500 text-center"><%= i + 1 %></td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm text-gray-500"><%= item.orderId %></td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm font-medium text-gray-900"><%= item.user %></td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm text-gray-900">
                  <%= item.product %>
                  <% if (item.size) { %>
                    <span class="ml-1 text-xs text-gray-500">(Size: <%= item.size %>)</span>
                  <% } %>
                  <span class="inline-block px-3 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                    delivered
                  </span>
                </td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm text-gray-500"><%= new Date(item.orderDate).toLocaleString('en-IN') %></td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm">
                  <span class="<%= item.paymentMethod === 'COD' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800' %> px-2 py-1 rounded-full text-xs font-medium">
                    <%= item.paymentMethod %>
                  </span>
                </td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm text-center"><%= item.quantity %></td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm text-right">₹ <%= item.itemSalePrice.toFixed(2) %></td>
                <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm text-right font-medium text-gray-900">₹ <%= item.totalSale.toFixed(2) %></td>
              </tr>
            <% } %>
          </tbody>
          
          <tfoot class="bg-gray-100 border-t border-gray-300">
            <tr>
              <td colspan="8" class="px-4 py-2 border border-gray-300 text-xs sm:text-sm font-bold text-right text-gray-900">Grand Total:</td>
              <td class="px-4 py-2 border border-gray-300 text-xs sm:text-sm font-bold text-right text-gray-900">₹ <%= grandTotal.toFixed(2) %></td>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>
    
    <!-- Pagination -->
    <% let queryParams = `day=${selectedDay || ''}&startDate=${startDate || ''}&endDate=${endDate || ''}`; %>

    <nav class="flex justify-center mt-6">
      <ul class="flex flex-wrap gap-2">
        <% if (currentPage > 1) { %>
          <li>
            <a class="px-3 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
              href="?page=<%= currentPage - 1 %>&<%= queryParams %>">Previous</a>
          </li>
        <% } %>
        
        <% for (let i = 1; i <= totalPages; i++) { %>
          <li>
            <a class="px-3 py-2 <%= i === currentPage ? 'bg-indigo-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-50' %> 
              border border-gray-300 rounded-md text-sm font-medium"
              href="?page=<%= i %>&<%= queryParams %>"><%= i %></a>
          </li>
        <% } %>
    
        <% if (currentPage < totalPages) { %>
          <li>
            <a class="px-3 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50"
              href="?page=<%= currentPage + 1 %>&<%= queryParams %>">Next</a>
          </li>
        <% } %>
      </ul>
    </nav>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
  // Fix for the initMenuState function causing errors
  function initMenuState() {
    const mobileMenuBtn = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    // Only proceed if the elements exist
    if (mobileMenuBtn && mobileMenu) {
      // Initialize menu state
      mobileMenu.classList.add('hidden');
      
      // Add event listener
      mobileMenuBtn.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
      });
    }
  }
  
  // Safe initialization - checks if document is ready
  document.addEventListener('DOMContentLoaded', function() {
    // Only call initMenuState if it needs to be called in this page
    try {
      initMenuState();
    } catch (error) {
      console.log("Menu initialization skipped or encountered an error:", error);
    }
  });
  
  document.getElementById("createSalesReport").addEventListener("click", async (event) => {
    event.preventDefault();
    console.log("User clicked on generate PDF button");
    const salesData = collectSalesData();
    
    console.log("Sales data : ", salesData);
    await fetch("/admin/generatePdf", {
        method: "post",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(salesData),
    }).then((response) => response.blob())
      .then((blob) => downloadFile(blob, "report.pdf"))
      .catch(error => {
        console.error("Error generating PDF:", error);
        alert("Error generating PDF. Please try again.");
      });
  });

  document.getElementById("downloadExcelReport").addEventListener("click", async (event) => {
    event.preventDefault();
    console.log("User clicked on download Excel button");
    const salesData = collectSalesData();
    await fetch("/admin/downloadExcel", {
        method: "post",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(salesData),
    }).then((response) => response.blob())
      .then((blob) => downloadFile(blob, "report.xlsx"))
      .catch(error => {
        console.error("Error downloading Excel:", error);
        alert("Error downloading Excel. Please try again.");
      });
  });

  function collectSalesData() {
    console.log("Collecting sales data...");
    
    const salesData = [];
    const rows = document.querySelectorAll("#salesTable tbody tr");
    
    rows.forEach((row, index) => {
      if (row.cells.length >= 9) {
        salesData.push({
          id: index + 1,
          orderId: row.cells[1].textContent.trim(),
          customer: row.cells[2].textContent.trim(),
          product: row.cells[3].textContent.trim().split('(')[0].trim(),
          date: row.cells[4].textContent.trim(),
          payment: row.cells[5].querySelector('span').textContent.trim(),
          quantity: parseInt(row.cells[6].textContent.trim()) || 0,
          price: parseFloat(row.cells[7].textContent.replace(/[^0-9.-]/g, "")) || 0,
          totalSale: parseFloat(row.cells[8].textContent.replace(/[^0-9.-]/g, "")) || 0
        });
      }
    });
    
    console.log("Collected sales data:", salesData);
    return salesData;
  }

  function downloadFile(blob, filename) {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url); // Clean up
    document.body.removeChild(a);
  }

  function filterByDate() {
    let startDate = document.getElementById("startDate").value;
    let endDate = document.getElementById("endDate").value;
    if (!startDate || !endDate) {
      Swal.fire({
  icon: 'warning',
  title: 'Missing Date Range',
  text: 'Please select both start and end date.',
  confirmButtonColor: '#6366f1', // indigo
});

      return;
    }
    window.location.href = `/admin/sale-reports?startDate=${startDate}&endDate=${endDate}`;
  }
</script>

<%- include("partials/footer") %>          